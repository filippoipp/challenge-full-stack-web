[["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/middlewares/validation.test.ts",{"fileContent":"import crypto from 'crypto';\r\n\r\nimport Joi from '@hapi/joi';\r\nimport { getMockReq, getMockRes } from '@jest-mock/express';\r\n\r\nimport HttpError from '../errors/http-error';\r\nimport {\r\n  validateBody, validateParams, validateQuery, validateRequest,\r\n} from './validation';\r\n\r\nconst keycloakRequest = Joi.object({\r\n  keycloakTokenModel: Joi.object({\r\n    idAccount: Joi.string().required(),\r\n  }).required(),\r\n});\r\n\r\nconst anyParams = Joi.object({\r\n  idAccount: Joi.string().required(),\r\n});\r\n\r\nconst anyBody = Joi.object({\r\n  idAccount: Joi.string().required(),\r\n});\r\n\r\nconst fakeValue = () => crypto.randomBytes(32).toString('hex');\r\n\r\ndescribe('Test validation middleware', () => {\r\n  test('Should call next with error when called validateRequest with object empty', async () => {\r\n    const mockRequest = getMockReq({\r\n      keycloakTokenModel: {},\r\n    });\r\n\r\n    const httpError = new HttpError(422, 'SERVER-422', 'Validation error', [\r\n      { idAccount: 'keycloakTokenModel.idAccount is required' },\r\n    ]);\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateRequest(keycloakRequest);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith(httpError);\r\n  });\r\n\r\n  test('Should call next with error when called validateRequest with object undefined', async () => {\r\n    const mockRequest = getMockReq({\r\n      keycloakTokenModel: undefined,\r\n    });\r\n\r\n    const httpError = new HttpError(422, 'SERVER-422', 'Validation error', [\r\n      { idAccount: 'keycloakTokenModel is required' },\r\n    ]);\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateRequest(keycloakRequest);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith(httpError);\r\n  });\r\n\r\n  test('Should call next with empty when called validateRequest with object valid', async () => {\r\n    const mockRequest = getMockReq({\r\n      keycloakTokenModel: {\r\n        idAccount: fakeValue(),\r\n      },\r\n    });\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateRequest(keycloakRequest);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith();\r\n  });\r\n\r\n  test('Should call next with error when called validateParams with object empty', async () => {\r\n    const mockRequest = getMockReq({\r\n      params: {},\r\n    });\r\n\r\n    const httpError = new HttpError(422, 'SERVER-422', 'Validation error', [\r\n      { idAccount: 'idAccount is required' },\r\n    ]);\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateParams(anyParams);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith(httpError);\r\n  });\r\n\r\n  test('Should call next with empty when called validateParams with object valid', async () => {\r\n    const mockRequest = getMockReq({\r\n      params: {\r\n        idAccount: fakeValue(),\r\n      },\r\n    });\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateParams(anyParams);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith();\r\n  });\r\n\r\n  test('Should call next with error when called validateQuery with object empty', async () => {\r\n    const mockRequest = getMockReq({\r\n      query: {},\r\n    });\r\n\r\n    const httpError = new HttpError(422, 'SERVER-422', 'Validation error', [\r\n      { idAccount: 'idAccount is required' },\r\n    ]);\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateQuery(anyParams);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith(httpError);\r\n  });\r\n\r\n  test('Should call next with empty when called validateQuery with object valid', async () => {\r\n    const mockRequest = getMockReq({\r\n      query: {\r\n        idAccount: fakeValue(),\r\n      },\r\n    });\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateQuery(anyParams);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith();\r\n  });\r\n\r\n  test('Should call next with error when called validateBody with object empty', async () => {\r\n    const mockRequest = getMockReq({\r\n      body: {},\r\n    });\r\n\r\n    const httpError = new HttpError(422, 'SERVER-422', 'Validation error', [\r\n      { idAccount: 'idAccount is required' },\r\n    ]);\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateBody(anyBody);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith(httpError);\r\n  });\r\n\r\n  test('Should call next with empty when called validateBody with object valid', async () => {\r\n    const mockRequest = getMockReq({\r\n      body: {\r\n        idAccount: fakeValue(),\r\n      },\r\n    });\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateBody(anyBody);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith();\r\n  });\r\n});\r\n","resolvedModuleNames":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/http-error.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/middlewares/validation.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/default-error.ts"]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/http-error.ts",{"fileContent":"import DefaultError from './default-error';\r\n\r\nexport default class HttpError extends DefaultError {\r\n  public statusCode: number = null;\r\n\r\n  public report: any = null;\r\n\r\n  constructor(statusCode: number, errorCode: string, message: string, report: any, error?: Error) {\r\n    super(message, errorCode, error);\r\n\r\n    this.statusCode = statusCode;\r\n    this.report = report?.response ? { ...report.response } : report;\r\n  }\r\n}\r\n","resolvedModuleNames":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/default-error.ts"]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/default-error.ts",{"fileContent":"export default class DefaultError extends Error {\r\n  public code: string = null;\r\n\r\n  constructor(message: string, code: string, error?: Error) {\r\n    super(message);\r\n\r\n    Error.captureStackTrace(this, this.constructor);\r\n    this.name = this.constructor.name;\r\n    if (error && error.stack) {\r\n      this.stack = `${this.stack}\\n${error.stack.substring(error.stack.indexOf('\\n') + 1)}`;\r\n    }\r\n    this.code = code;\r\n  }\r\n}\r\n","resolvedModuleNames":[]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/middlewares/validation.ts",{"fileContent":"import { NextFunction, Request, Response } from 'express';\r\nimport { AnySchema } from '@hapi/joi';\r\nimport HttpError from '../errors/http-error';\r\n\r\nasync function checkAndReturnValidationResult(schema: AnySchema, data: any, joiConfig = {}) {\r\n  const { error, value: sanitizedData } = schema.validate(data, {\r\n    abortEarly: false,\r\n    allowUnknown: true,\r\n    ...joiConfig,\r\n  });\r\n\r\n  if (!error) {\r\n    return sanitizedData;\r\n  }\r\n\r\n  const report = error.details.map((detail) => {\r\n    const key = detail.path.join('.');\r\n    const message = detail.message.replace(/['\"]/g, '');\r\n    return { [key]: message };\r\n  });\r\n\r\n  throw new HttpError(422, 'SERVER-422', 'Validation error', report);\r\n}\r\n\r\nconst validateRequest = (joiSchema: AnySchema) => async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    await checkAndReturnValidationResult(joiSchema, req);\r\n    next();\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\nconst validateParams = (joiSchema: AnySchema) => async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    const { params } = req;\r\n    await checkAndReturnValidationResult(joiSchema, params, {\r\n      stripUnknown: true,\r\n    });\r\n    req.params = params;\r\n    next();\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\nconst validateQuery = (joiSchema: AnySchema) => async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    const { query } = req;\r\n    const result = await checkAndReturnValidationResult(joiSchema, query);\r\n    req.query = result;\r\n    next();\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\nconst validateBody = (joiSchema: AnySchema) => async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    const { body } = req;\r\n    await checkAndReturnValidationResult(joiSchema, body, {\r\n      stripUnknown: true,\r\n    });\r\n    req.body = body;\r\n    next();\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\nexport {\r\n  validateBody, validateParams, validateQuery, validateRequest,\r\n};\r\n","resolvedModuleNames":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/http-error.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/default-error.ts"]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/controller.spec.ts",{"fileContent":"import { getMockReq, getMockRes } from '@jest-mock/express';\nimport { faker } from '@faker-js/faker';\nimport Repository from './repository';\nimport controller from './controller';\nimport GetPostsResponse from './interfaces/get-posts-response';\nimport CreatePost from './interfaces/create-post';\nimport Post from './entities/post';\n\njest.mock('./repository');\n\nconst RepositoryMock = Repository as jest.MockedClass<typeof Repository>;\n\ndescribe('Test post controller', () => {\n  beforeEach(async () => {\n    RepositoryMock.prototype.getAll.mockRestore();\n    RepositoryMock.prototype.create.mockRestore();\n  });\n\n  test('Should response 200 when call getAll with sucess', async () => {\n    const mockRequest = getMockReq();\n\n    const getPostsMock: GetPostsResponse = {\n      data: [],\n      count: faker.datatype.number(),\n      currentPage: faker.datatype.number(),\n      nextPage: faker.datatype.number(),\n      prevPage: faker.datatype.number(),\n      lastPage: faker.datatype.number(),\n    };\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.getAll.mockResolvedValue(getPostsMock);\n\n    await controller.getAll(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.getAll).toBeCalledTimes(1);\n    expect(RepositoryMock.prototype.getAll).toBeCalledWith({});\n    expect(res.status).toBeCalledTimes(1);\n    expect(res.status).toBeCalledWith(200);\n    expect(res.json).toBeCalledTimes(1);\n    expect(next).toBeCalledTimes(0);\n  });\n\n  test('Should return error when call getAll with exception', async () => {\n    const mockRequest = getMockReq();\n\n    const mockError = new Error('Any Error.');\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.getAll.mockRejectedValue(mockError);\n\n    await controller.getAll(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.getAll).toBeCalledTimes(1);\n    expect(res.status).not.toBeCalled();\n    expect(res.json).not.toBeCalled();\n    expect(next).toBeCalledTimes(1);\n    expect(next).toBeCalledWith(mockError);\n  });\n\n  test('Should response 201 when call create with sucess', async () => {\n    const createPostBodyMock: CreatePost = {\n      userId: faker.datatype.uuid(),\n      content: faker.datatype.string(),\n      type: 'POST',\n    };\n\n    const post: Post = {\n      userId: createPostBodyMock.userId,\n      type: 'POST',\n      content: createPostBodyMock.content,\n      repostedPostId: null,\n      comment: null,\n      id: faker.datatype.uuid(),\n      createdAt: faker.datatype.datetime(),\n      updatedAt: faker.datatype.datetime(),\n    };\n\n    const mockRequest = getMockReq({\n      body: createPostBodyMock,\n    });\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.create.mockResolvedValue(post);\n\n    await controller.create(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.create).toBeCalledTimes(1);\n    expect(RepositoryMock.prototype.create).toBeCalledWith(createPostBodyMock);\n    expect(res.status).toBeCalledTimes(1);\n    expect(res.status).toBeCalledWith(201);\n    expect(res.json).toBeCalledTimes(1);\n    expect(res.json).toBeCalledWith(post);\n    expect(next).toBeCalledTimes(0);\n  });\n\n  test('Should return error when call create with exception', async () => {\n    const createPostBodyMock: CreatePost = {\n      userId: faker.datatype.uuid(),\n      content: faker.datatype.string(),\n      type: 'POST',\n    };\n\n    const mockRequest = getMockReq({\n      body: createPostBodyMock,\n    });\n\n    const mockError = new Error('Any Error.');\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.create.mockRejectedValue(mockError);\n\n    await controller.create(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.create).toBeCalledTimes(1);\n    expect(res.status).not.toBeCalled();\n    expect(res.json).not.toBeCalled();\n    expect(next).toBeCalledTimes(1);\n    expect(next).toBeCalledWith(mockError);\n  });\n});\n","resolvedModuleNames":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/repository.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/controller.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/interfaces/get-posts-response.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/interfaces/create-post.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/entities/post.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/post/index.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/http-error.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/interfaces/post-type.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/entities/user.ts"]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/config/app-config.test.ts",{"fileContent":"describe('Test app config', () => {\n  const { env } = process;\n\n  beforeEach(() => {\n    jest.resetModules();\n    process.env = env;\n  });\n\n  afterAll(() => {\n    process.env = env;\n  });\n\n  test('Should return the environment variable configuration SERVERS', async () => {\n    const Config = (await import('./app-config')).default;\n\n    expect(Config.SERVERS.http.hostname).toEqual('0.0.0.0');\n    expect(Config.SERVERS.http.port).toEqual(3001);\n  });\n\n  test('Should return the default configuration SERVERS', async () => {\n    process.env.HTTP_HOST = '';\n    process.env.HTTP_PORT = '';\n    const Config = (await import('./app-config')).default;\n\n    expect(Config.SERVERS.http.hostname).toEqual('0.0.0.0');\n    expect(Config.SERVERS.http.port).toEqual(3001);\n  });\n});\n","resolvedModuleNames":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/config/app-config.ts"]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/config/app-config.ts",{"fileContent":"class Config {\n  public static ENVIRONMENT = process.env.ENVIRONMENT || 'dev';\n\n  public static SERVERS = {\n    http: {\n      hostname: process.env.HOST || '0.0.0.0',\n      port: Number(process.env.PORT) || 3001,\n    },\n  };\n}\n\nexport default Config;\n","resolvedModuleNames":[]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/repository.ts",{"fileContent":"import {\n  Between, getRepository, LessThan, MoreThan,\n} from 'typeorm';\nimport moment from 'moment';\nimport { postErrorKeys, postErrorMessages } from '../../errors/translator/post';\nimport HttpError from '../../errors/http-error';\nimport CreatePost from './interfaces/create-post';\nimport Post from './entities/post';\nimport GetPostsResponse from './interfaces/get-posts-response';\n\nexport default class PostRepository {\n  private async paginateResponse(data, page: number, limit: number): Promise<GetPostsResponse> {\n    const [result, total] = data;\n    const lastPage = Math.ceil(total / limit);\n    const nextPage = page + 1 > lastPage ? null : page + 1;\n    const prevPage = page - 1 < 1 ? null : page - 1;\n\n    return {\n      data: [...result],\n      count: total,\n      currentPage: page,\n      nextPage,\n      prevPage,\n      lastPage,\n    };\n  }\n\n  public async getAll(query: any): Promise<GetPostsResponse> {\n    try {\n      const postRepository = getRepository(Post);\n\n      const take = query.take || 10;\n      const page = query.page || 1;\n      const skip = (page - 1) * take;\n\n      const data = await postRepository.findAndCount(\n        {\n          relations: ['user'],\n          where: {\n            ...(query.username && { user: { username: query.username } }),\n            ...(query.beginDate && { createdAt: MoreThan(query.beginDate) }),\n            ...(query.endDate && { createdAt: LessThan(query.endDate) }),\n          },\n          order: { id: 'DESC' },\n          take,\n          skip,\n        },\n      );\n\n      return await this.paginateResponse(data, page, take);\n    } catch (error) {\n      throw new HttpError(\n        500,\n        postErrorKeys.GET_POSTS_FAILED,\n        postErrorMessages[postErrorKeys.GET_POSTS_FAILED],\n        {},\n      );\n    }\n  }\n\n  public async create(postData: CreatePost): Promise<Post> {\n    try {\n      const today = moment().format('YYYY-MM-DD');\n      const postRepository = getRepository(Post);\n      const userPostsOfDay = await postRepository.count({\n        where: {\n          userId: postData.userId,\n          createdAt: Between(`${today} 00:00:00`, `${today} 23:59:59`),\n        },\n      });\n\n      if (userPostsOfDay >= 5) {\n        throw new HttpError(\n          400,\n          postErrorKeys.POST_CREATION_FAILED,\n          postErrorMessages[postErrorKeys.POST_CREATION_FAILED],\n          {},\n        );\n      }\n\n      const post = await postRepository.save(postData);\n      return post;\n    } catch (error) {\n      console.log(error)\n      throw new HttpError(\n        500,\n        postErrorKeys.POST_CREATION_FAILED,\n        postErrorMessages[postErrorKeys.POST_CREATION_FAILED],\n        {},\n      );\n    }\n  }\n}\n","resolvedModuleNames":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/post/index.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/http-error.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/interfaces/create-post.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/entities/post.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/interfaces/get-posts-response.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/post/key.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/post/message.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/default-error.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/interfaces/post-type.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/entities/user.ts"]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/post/index.ts",{"fileContent":"import postErrorKeys from './key';\nimport postErrorMessages from './message';\n\nexport { postErrorKeys, postErrorMessages };\n","resolvedModuleNames":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/post/key.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/post/message.ts"]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/post/key.ts",{"fileContent":"export default {\n  POST_CREATION_FAILED: 'POST-000',\n  GET_POSTS_FAILED: 'POST-001',\n};\n","resolvedModuleNames":[]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/post/message.ts",{"fileContent":"export default {\n  'POST-000': 'Failed to create post.',\n  'POST-001': 'Failed to get posts.',\n};\n","resolvedModuleNames":[]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/entities/post.ts",{"fileContent":"import {\n  Entity,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n  OneToMany,\n} from 'typeorm';\n// eslint-disable-next-line import/no-cycle\nimport User from '../../user/entities/user';\nimport PostType from '../interfaces/post-type';\n\n@Entity('post')\nexport default class Post {\n  @PrimaryGeneratedColumn('uuid', { name: 'id' })\n  id: string;\n\n  @Column({ name: 'user_id' })\n  userId: string;\n\n  @JoinColumn({ name: 'user_id' })\n  @ManyToOne(() => User, (user) => user.posts)\n  user?: User;\n\n  @Column({ nullable: true })\n  content: string;\n\n  @Column({ name: 'reposted_post_id', nullable: true })\n  repostedPostId?: string;\n\n  @ManyToOne(() => Post, (post) => post.repostedPost)\n  @JoinColumn({ name: 'reposted_post_id' })\n  repostedPost?: Post;\n\n  @OneToMany(() => Post, (post) => post.repost)\n  repost?: Post[];\n\n  @Column({ nullable: true })\n  comment?: string;\n\n  @Column()\n  type: PostType;\n\n  @CreateDateColumn({ name: 'created_at', select: false })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at', select: false })\n  updatedAt: Date;\n}\n","resolvedModuleNames":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/entities/user.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/interfaces/post-type.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/entities/post.ts"]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/entities/user.ts",{"fileContent":"import {\n  Entity,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n} from 'typeorm';\n// eslint-disable-next-line import/no-cycle\nimport Post from '../../post/entities/post';\n\n@Entity('user')\nexport default class User {\n  @PrimaryGeneratedColumn('uuid', { name: 'id' })\n  id: string;\n\n  @Column({ unique: true, length: 14 })\n  username: string;\n\n  @OneToMany(() => Post, (post) => post.user)\n  posts?: Post[];\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at', select: false })\n  updatedAt: Date;\n}\n","resolvedModuleNames":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/entities/post.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/entities/user.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/interfaces/post-type.ts"]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/controller.ts",{"fileContent":"import { NextFunction, Request, Response } from 'express';\nimport PostRepository from './repository';\n\nasync function getAll(req: Request, res: Response, next: NextFunction) {\n  try {\n    const repository = new PostRepository();\n    const response = await repository.getAll(req.query);\n    res.status(200).json(response);\n  } catch (error) {\n    next(error);\n  }\n}\n\nasync function create(req: Request, res: Response, next: NextFunction) {\n  try {\n    const repository = new PostRepository();\n    const response = await repository.create(req.body);\n    res.status(201).json(response);\n  } catch (error) {\n    next(error);\n  }\n}\n\nexport default {\n  getAll,\n  create,\n};\n","resolvedModuleNames":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/repository.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/post/index.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/http-error.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/interfaces/create-post.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/entities/post.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/interfaces/get-posts-response.ts"]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/repository.spec.ts",{"fileContent":"import { faker } from '@faker-js/faker';\nimport { repositoryMock } from '../../../mocks/typeorm.mock';\nimport Post from './entities/post';\nimport CreatePost from './interfaces/create-post';\nimport PostRepository from './repository';\n\ndescribe('Test post repository', () => {\n  beforeEach(() => {\n    repositoryMock.findAndCount.mockRestore();\n    repositoryMock.count.mockRestore();\n    repositoryMock.save.mockRestore();\n  });\n\n  test('Should return created post and pagination with success', async () => {\n    const createPostBodyMock: CreatePost = {\n      userId: faker.datatype.uuid(),\n      content: faker.datatype.string(),\n      type: 'POST',\n    };\n\n    const postMock: Post = {\n      userId: faker.datatype.uuid(),\n      type: 'POST',\n      content: faker.datatype.string(),\n      repostedPostId: null,\n      comment: null,\n      id: faker.datatype.uuid(),\n      createdAt: faker.datatype.datetime(),\n      updatedAt: faker.datatype.datetime(),\n    };\n\n    repositoryMock.count.mockResolvedValue(2);\n    repositoryMock.save.mockResolvedValue(postMock);\n\n    const repository = new PostRepository();\n    const createdPost = await repository.create(createPostBodyMock);\n\n    expect(repositoryMock.count).toBeCalledTimes(1);\n    expect(repositoryMock.save).toBeCalledWith(createPostBodyMock);\n    expect(createdPost).toEqual(postMock);\n  });\n});\n","resolvedModuleNames":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/mocks/typeorm.mock.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/entities/post.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/interfaces/create-post.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/repository.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/entities/user.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/interfaces/post-type.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/post/index.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/http-error.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/interfaces/get-posts-response.ts"]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/controller.spec.ts",{"fileContent":"import { getMockReq, getMockRes } from '@jest-mock/express';\nimport { faker } from '@faker-js/faker';\nimport Repository from './repository';\nimport controller from './controller';\nimport GetUserResponse from './interfaces/get-user-response';\n\njest.mock('./repository');\n\nconst RepositoryMock = Repository as jest.MockedClass<typeof Repository>;\n\ndescribe('Test post controller', () => {\n  beforeEach(async () => {\n    RepositoryMock.prototype.getUser.mockRestore();\n  });\n\n  test('Should response 200 when call getUser with sucess', async () => {\n    const username = faker.datatype.string();\n\n    const mockRequest = getMockReq({\n      params: {\n        username,\n      },\n    });\n\n    const userMock: GetUserResponse = {\n      username,\n      createdAt: faker.datatype.string(),\n      postsCount: faker.datatype.number(),\n    };\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.getUser.mockResolvedValue(userMock);\n\n    await controller.getUser(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.getUser).toBeCalledTimes(1);\n    expect(RepositoryMock.prototype.getUser).toBeCalledWith(username);\n    expect(res.status).toBeCalledTimes(1);\n    expect(res.status).toBeCalledWith(200);\n    expect(res.json).toBeCalledTimes(1);\n    expect(next).toBeCalledTimes(0);\n  });\n\n  test('Should return error when call getUser with exception', async () => {\n    const username = faker.datatype.string();\n\n    const mockRequest = getMockReq({\n      params: {\n        username,\n      },\n    });\n\n    const mockError = new Error('Any Error.');\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.getUser.mockRejectedValue(mockError);\n\n    await controller.getUser(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.getUser).toBeCalledTimes(1);\n    expect(res.status).not.toBeCalled();\n    expect(res.json).not.toBeCalled();\n    expect(next).toBeCalledTimes(1);\n    expect(next).toBeCalledWith(mockError);\n  });\n});\n","resolvedModuleNames":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/repository.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/controller.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/interfaces/get-user-response.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/repository.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/user/index.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/http-error.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/entities/user.ts"]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/repository.ts",{"fileContent":"import { getRepository } from 'typeorm';\nimport moment from 'moment';\nimport PostRepository from '../post/repository';\nimport { userErrorKeys, userErrorMessages } from '../../errors/translator/user';\nimport HttpError from '../../errors/http-error';\nimport User from './entities/user';\nimport GetUserResponse from './interfaces/get-user-response';\n\nexport default class UserRepository {\n  public async getUser(username: string): Promise<GetUserResponse> {\n    try {\n      const userRepository = getRepository(User);\n      const user = await userRepository.findOne({\n        where: {\n          username,\n        },\n      });\n\n      const postRepository = new PostRepository();\n      const userPosts = await postRepository.getAll({ username });\n\n      return {\n        username,\n        createdAt: moment(user.createdAt).format('MMMM DD, YYYY'),\n        postsCount: userPosts.count,\n      };\n    } catch (error) {\n      throw new HttpError(\n        500,\n        userErrorKeys.GET_USER_FAILS,\n        userErrorMessages[userErrorKeys.GET_USER_FAILS],\n        {},\n      );\n    }\n  }\n}\n","resolvedModuleNames":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/repository.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/user/index.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/http-error.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/entities/user.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/interfaces/get-user-response.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/post/index.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/interfaces/create-post.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/entities/post.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/interfaces/get-posts-response.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/user/key.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/user/message.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/default-error.ts"]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/user/index.ts",{"fileContent":"import userErrorKeys from './key';\r\nimport userErrorMessages from './message';\r\n\r\nexport { userErrorKeys, userErrorMessages };\r\n","resolvedModuleNames":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/user/key.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/user/message.ts"]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/user/key.ts",{"fileContent":"export default {\n  GET_USER_FAILS: 'USER-000',\n};\n","resolvedModuleNames":[]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/user/message.ts",{"fileContent":"export default {\n  'USER-000': 'Failed to get user.',\n};\n","resolvedModuleNames":[]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/controller.ts",{"fileContent":"import { NextFunction, Request, Response } from 'express';\nimport UserRepository from './repository';\n\nasync function getUser(req: Request, res: Response, next: NextFunction) {\n  try {\n    const repository = new UserRepository();\n    const user = await repository.getUser(req.params.username);\n\n    res.status(200).json(user);\n  } catch (error) {\n    next(error);\n  }\n}\n\nexport default {\n  getUser,\n};\n","resolvedModuleNames":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/repository.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/repository.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/translator/user/index.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/errors/http-error.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/entities/user.ts","/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/interfaces/get-user-response.ts"]}],["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/mocks/typeorm.mock.ts",{"fileContent":"// eslint-disable-next-line import/no-extraneous-dependencies\nimport { mock, MockProxy } from 'jest-mock-extended';\nimport { Connection, Repository, SelectQueryBuilder } from 'typeorm';\n\nexport const repositoryMock = mock<Repository<any>>();\nexport const connectionMock: MockProxy<Connection> = mock<Connection>();\nexport const selectQueryBuilderMock = mock<SelectQueryBuilder<any>>();\n\njest.mock('typeorm', () => ({\n  getCustomRepository: () => repositoryMock,\n  getRepository: () => repositoryMock,\n  getConnection: () => connectionMock,\n\n  Entity: () => () => { },\n  PrimaryColumn: () => () => { },\n  PrimaryGeneratedColumn: () => () => { },\n  Column: () => () => { },\n  CreateDateColumn: () => () => { },\n  UpdateDateColumn: () => () => { },\n  Unique: () => () => { },\n  JoinColumn: () => () => { },\n  JoinTable: () => () => { },\n  OneToOne: () => () => { },\n  OneToMany: () => () => { },\n  ManyToOne: () => () => { },\n  Repository: jest.fn(),\n  EntityRepository: () => () => { },\n}));\n","resolvedModuleNames":[]}]]