{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAaM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAbN;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAGA,MAAqBA,cAArB,CAAmC;EACV,MAAVC,UAAU,CAACC,QAAD,EAA4B;IAAA;IAAA;IAAA;;IACjD,IAAI;MACF,MAAMC,cAAc;MAAA;MAAA,0BAAG,6BAAcC,cAAd,CAAH,CAApB;MACA,MAAMC,IAAI;MAAA;MAAA,0BAAG,MAAMF,cAAc,CAACG,IAAf,CAAoBH,cAAc,CAACI,MAAf,CAAsBL,QAAtB,CAApB,CAAT,CAAV;;MAFE;MAAA;MAGF,OAAOG,IAAI,CAACG,QAAZ;;MAHE;MAAA;MAKF,OAAOH,IAAP;IACD,CAND,CAME,OAAOI,KAAP,EAAc;MAAA;MAAA;MACd,MAAM,IAAIC,oBAAJ,CACJ,GADI,EAEJC,qBAAcC,gBAFV,EAGJD,yBAAkBA,qBAAcC,gBAAhC,CAHI,EAIJ,EAJI,CAAN;IAMD;EACF;;EAEuB,MAAXC,WAAW,CAACC,KAAD,EAAc;IAAA;IAAA;IAAA;;IACpC,IAAI;MACF,MAAMX,cAAc;MAAA;MAAA,2BAAG,6BAAcC,cAAd,CAAH,CAApB;;MADE;MAAA;MAEF,OAAO,MAAMD,cAAc,CAACY,OAAf,CAAuB;QAClCC,KAAK,EAAE;UACLF;QADK;MAD2B,CAAvB,CAAb;IAKD,CAPD,CAOE,OAAOL,KAAP,EAAc;MAAA;MAAA;MACd,MAAM,IAAIC,oBAAJ,CACJ,GADI,EAEJC,qBAAcM,cAFV,EAGJN,yBAAkBA,qBAAcM,cAAhC,CAHI,EAIJ,EAJI,CAAN;IAMD;EACF;;AAlCgC;;;;AAAnCC","names":["UserRepository","createUser","userData","userRepository","user_2","user","save","create","password","error","http_error_1","user_1","CREATE_USER_FAIL","findByEmail","email","findOne","where","FIND_USER_FAIL","exports"],"sources":["/home/filippoippolitorodrigues/√Årea de Trabalho/MYPROJECTS/challenge-full-stack-web/api/src/domain/user/repository.ts"],"sourcesContent":["import { getRepository } from 'typeorm';\nimport { userErrorKeys, userErrorMessages } from '../../errors/translator/user';\nimport HttpError from '../../errors/http-error';\nimport User from './entities/user';\nimport CreateUserRequest from './interfaces/inputs/create-user-dto';\n\nexport default class UserRepository {\n  public async createUser(userData: CreateUserRequest): Promise<User> {\n    try {\n      const userRepository = getRepository(User);\n      const user = await userRepository.save(userRepository.create(userData));\n      delete user.password;\n\n      return user;\n    } catch (error) {\n      throw new HttpError(\n        500,\n        userErrorKeys.CREATE_USER_FAIL,\n        userErrorMessages[userErrorKeys.CREATE_USER_FAIL],\n        {},\n      );\n    }\n  }\n\n  public async findByEmail(email: string): Promise<User> {\n    try {\n      const userRepository = getRepository(User);\n      return await userRepository.findOne({\n        where: {\n          email,\n        },\n      });\n    } catch (error) {\n      throw new HttpError(\n        500,\n        userErrorKeys.FIND_USER_FAIL,\n        userErrorMessages[userErrorKeys.FIND_USER_FAIL],\n        {},\n      );\n    }\n  }\n}\n"]}