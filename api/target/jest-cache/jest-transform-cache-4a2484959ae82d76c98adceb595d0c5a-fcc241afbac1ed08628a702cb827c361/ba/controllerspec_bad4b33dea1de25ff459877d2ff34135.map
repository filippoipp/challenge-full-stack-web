{"file":"/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/challenge-full-stack-web/api/src/domain/student/controller.spec.ts","mappings":"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","names":[],"sources":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/challenge-full-stack-web/api/src/domain/student/controller.spec.ts"],"sourcesContent":["import { getMockReq, getMockRes } from '@jest-mock/express';\nimport { faker } from '@faker-js/faker';\nimport Repository from './repository';\nimport controller from './controller';\nimport Student from './entities/student';\n\njest.mock('./repository');\n\nconst RepositoryMock = Repository as jest.MockedClass<typeof Repository>;\n\ndescribe('Test student controller', () => {\n  beforeEach(async () => {\n    RepositoryMock.prototype.createStudent.mockRestore();\n    RepositoryMock.prototype.listStudents.mockRestore();\n    RepositoryMock.prototype.updateStudent.mockRestore();\n    RepositoryMock.prototype.deleteStudent.mockRestore();\n  });\n\n  test('Should response 200 when call listStudents with sucess', async () => {\n    const mockRequest = getMockReq();\n\n    const studentsMock: Student[] = [\n      {\n        id: faker.datatype.uuid(),\n        name: faker.internet.userName(),\n        email: faker.internet.email(),\n        ra: faker.datatype.string(),\n        cpf: faker.datatype.string(),\n        createdAt: faker.datatype.datetime(),\n        updatedAt: faker.datatype.datetime(),\n      },\n      {\n        id: faker.datatype.uuid(),\n        name: faker.internet.userName(),\n        email: faker.internet.email(),\n        ra: faker.datatype.string(),\n        cpf: faker.datatype.string(),\n        createdAt: faker.datatype.datetime(),\n        updatedAt: faker.datatype.datetime(),\n      },\n    ];\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.listStudents.mockResolvedValue(studentsMock);\n\n    await controller.listStudents(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.listStudents).toBeCalledTimes(1);\n    expect(RepositoryMock.prototype.listStudents).toBeCalledWith();\n    expect(res.status).toBeCalledTimes(1);\n    expect(res.status).toBeCalledWith(200);\n    expect(res.json).toBeCalledTimes(1);\n    expect(next).toBeCalledTimes(0);\n  });\n\n  test('Should return error when call getUser with exception', async () => {\n    const mockRequest = getMockReq();\n\n    const mockError = new Error('Any Error.');\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.listStudents.mockRejectedValue(mockError);\n\n    await controller.listStudents(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.listStudents).toBeCalledTimes(1);\n    expect(res.status).not.toBeCalled();\n    expect(res.json).not.toBeCalled();\n    expect(next).toBeCalledTimes(1);\n    expect(next).toBeCalledWith(mockError);\n  });\n\n  test('Should response 201 when call createStudent with sucess', async () => {\n    const studentMock = {\n      name: faker.internet.userName(),\n      email: faker.internet.email(),\n      cpf: faker.datatype.string(),\n    };\n\n    const mockRequest = getMockReq({\n      body: studentMock,\n    });\n\n    const studentResponseMock: Student = {\n      name: studentMock.name,\n      email: studentMock.email,\n      cpf: studentMock.cpf,\n      ra: faker.datatype.string(),\n      id: faker.datatype.uuid(),\n      createdAt: faker.datatype.datetime(),\n      updatedAt: faker.datatype.datetime(),\n    };\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.createStudent.mockResolvedValue(studentResponseMock);\n\n    await controller.createStudent(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.createStudent).toBeCalledTimes(1);\n    expect(RepositoryMock.prototype.createStudent).toBeCalledWith(studentMock);\n    expect(res.status).toBeCalledTimes(1);\n    expect(res.status).toBeCalledWith(201);\n    expect(res.json).toBeCalledTimes(1);\n    expect(next).toBeCalledTimes(0);\n  });\n\n  test('Should return error when call createStudent with exception', async () => {\n    const mockRequest = getMockReq();\n\n    const mockError = new Error('Any Error.');\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.createStudent.mockRejectedValue(mockError);\n\n    await controller.createStudent(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.createStudent).toBeCalledTimes(1);\n    expect(res.status).not.toBeCalled();\n    expect(res.json).not.toBeCalled();\n    expect(next).toBeCalledTimes(1);\n    expect(next).toBeCalledWith(mockError);\n  });\n\n  test('Should response 204 when call deleteStudent with sucess', async () => {\n    const fakeStudentId = faker.datatype.uuid();\n\n    const mockRequest = getMockReq({\n      params: {\n        id: fakeStudentId,\n      },\n    });\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.deleteStudent.mockResolvedValue();\n\n    await controller.deleteStudent(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.deleteStudent).toBeCalledTimes(1);\n    expect(RepositoryMock.prototype.deleteStudent).toBeCalledWith(fakeStudentId);\n    expect(res.status).toBeCalledTimes(1);\n    expect(res.status).toBeCalledWith(204);\n    expect(res.json).toBeCalledTimes(1);\n    expect(next).toBeCalledTimes(0);\n  });\n\n  test('Should return error when call deleteStudent with exception', async () => {\n    const mockRequest = getMockReq();\n\n    const mockError = new Error('Any Error.');\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.deleteStudent.mockRejectedValue(mockError);\n\n    await controller.deleteStudent(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.deleteStudent).toBeCalledTimes(1);\n    expect(res.status).not.toBeCalled();\n    expect(res.json).not.toBeCalled();\n    expect(next).toBeCalledTimes(1);\n    expect(next).toBeCalledWith(mockError);\n  });\n\n  test('Should response 204 when call updateStudent with sucess', async () => {\n    const fakeStudentId = faker.datatype.uuid();\n\n    const mockRequest = getMockReq({\n      params: {\n        id: fakeStudentId,\n      },\n    });\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.updateStudent.mockResolvedValue();\n\n    await controller.updateStudent(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.updateStudent).toBeCalledTimes(1);\n    expect(RepositoryMock.prototype.updateStudent).toBeCalledWith({}, fakeStudentId);\n    expect(res.status).toBeCalledTimes(1);\n    expect(res.status).toBeCalledWith(204);\n    expect(res.json).toBeCalledTimes(1);\n    expect(next).toBeCalledTimes(0);\n  });\n\n  test('Should return error when call updateStudent with exception', async () => {\n    const mockRequest = getMockReq();\n\n    const mockError = new Error('Any Error.');\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.updateStudent.mockRejectedValue(mockError);\n\n    await controller.updateStudent(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.updateStudent).toBeCalledTimes(1);\n    expect(res.status).not.toBeCalled();\n    expect(res.json).not.toBeCalled();\n    expect(next).toBeCalledTimes(1);\n    expect(next).toBeCalledWith(mockError);\n  });\n});\n"],"version":3}