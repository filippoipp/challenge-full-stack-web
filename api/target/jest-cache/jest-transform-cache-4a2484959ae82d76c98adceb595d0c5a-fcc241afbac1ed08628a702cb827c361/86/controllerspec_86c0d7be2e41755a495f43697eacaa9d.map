{"file":"/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/challenge-full-stack-web/api/src/domain/auth/controller.spec.ts","mappings":"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","names":[],"sources":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/challenge-full-stack-web/api/src/domain/auth/controller.spec.ts"],"sourcesContent":["import { getMockReq, getMockRes } from '@jest-mock/express';\nimport { faker } from '@faker-js/faker';\nimport Repository from './repository';\nimport controller from './controller';\n\njest.mock('./repository');\n\nconst RepositoryMock = Repository as jest.MockedClass<typeof Repository>;\n\ndescribe('Test auth controller', () => {\n  beforeEach(async () => {\n    RepositoryMock.prototype.createToken.mockRestore();\n  });\n\n  test('Should response 201 when call createToken with sucess', async () => {\n    const authMock = {\n      name: faker.internet.userName(),\n      email: faker.internet.email(),\n      password: faker.internet.password(),\n    };\n\n    const mockRequest = getMockReq({\n      body: authMock,\n    });\n\n    const authResponseMock = {\n      id: faker.datatype.uuid(),\n      name: authMock.name,\n      email: authMock.email,\n      createdAt: faker.datatype.datetime(),\n      updatedAt: faker.datatype.datetime(),\n      access_token: faker.datatype.uuid(),\n    };\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.createToken.mockResolvedValue(authResponseMock);\n\n    await controller.createToken(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.createToken).toBeCalledTimes(1);\n    expect(RepositoryMock.prototype.createToken).toBeCalledWith(authMock);\n    expect(res.status).toBeCalledTimes(1);\n    expect(res.status).toBeCalledWith(201);\n    expect(res.json).toBeCalledTimes(1);\n    expect(next).toBeCalledTimes(0);\n  });\n\n  test('Should return error when call createToken with exception', async () => {\n    const mockRequest = getMockReq();\n\n    const mockError = new Error('Any Error.');\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.createToken.mockRejectedValue(mockError);\n\n    await controller.createToken(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.createToken).toBeCalledTimes(1);\n    expect(res.status).not.toBeCalled();\n    expect(res.json).not.toBeCalled();\n    expect(next).toBeCalledTimes(1);\n    expect(next).toBeCalledWith(mockError);\n  });\n});\n"],"version":3}