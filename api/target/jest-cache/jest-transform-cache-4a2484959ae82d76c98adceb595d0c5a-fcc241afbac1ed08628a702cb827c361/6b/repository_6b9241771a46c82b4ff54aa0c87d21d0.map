{"version":3,"mappings":"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","names":["StudentRepository","generateRa","Date","getFullYear","Math","floor","random","createStudent","studentData","studentRepository","student_2","student","save","ra","error","http_error_1","student_1","CREATE_STUDENT_FAIL","listStudents","students","find","GET_ALL_STUDENTS_FAIL","updateStudent","studentId","update","UPDATE_STUDENT_FAIL","deleteStudent","delete","DELETE_STUDENT_FAIL","exports"],"sources":["/home/filippoippolitorodrigues/√Årea de Trabalho/MYPROJECTS/challenge-full-stack-web/api/src/domain/student/repository.ts"],"sourcesContent":["import { getRepository } from 'typeorm';\nimport { studentErrorKeys, studentErrorMessages } from '../../errors/translator/student';\nimport HttpError from '../../errors/http-error';\nimport Student from './entities/student';\nimport CreateStudentRequest from './interfaces/inputs/create-student-dto';\nimport UpdateStudentRequest from './interfaces/inputs/update-student-dto';\n\nexport default class StudentRepository {\n  private async generateRa(): Promise<string> {\n    return `${new Date().getFullYear()}${Math.floor(Math.random() * 90000) + 10000}`;\n  }\n\n  public async createStudent(studentData: CreateStudentRequest): Promise<Student> {\n    try {\n      const studentRepository = getRepository(Student);\n      const student = await studentRepository.save({\n        ...studentData,\n        ra: await this.generateRa(),\n      });\n      return student;\n    } catch (error) {\n      throw new HttpError(\n        500,\n        studentErrorKeys.CREATE_STUDENT_FAIL,\n        studentErrorMessages[studentErrorKeys.CREATE_STUDENT_FAIL],\n        {},\n      );\n    }\n  }\n\n  public async listStudents(): Promise<Student[]> {\n    try {\n      const studentRepository = getRepository(Student);\n      const students = await studentRepository.find();\n      return students;\n    } catch (error) {\n      throw new HttpError(\n        500,\n        studentErrorKeys.GET_ALL_STUDENTS_FAIL,\n        studentErrorMessages[studentErrorKeys.GET_ALL_STUDENTS_FAIL],\n        {},\n      );\n    }\n  }\n\n  public async updateStudent(studentData: UpdateStudentRequest, studentId: string): Promise<void> {\n    try {\n      const studentRepository = getRepository(Student);\n      await studentRepository.update(studentId, studentData);\n    } catch (error) {\n      throw new HttpError(\n        500,\n        studentErrorKeys.UPDATE_STUDENT_FAIL,\n        studentErrorMessages[studentErrorKeys.UPDATE_STUDENT_FAIL],\n        {},\n      );\n    }\n  }\n\n  public async deleteStudent(studentId: string): Promise<void> {\n    try {\n      const studentRepository = getRepository(Student);\n      await studentRepository.delete(studentId);\n    } catch (error) {\n      throw new HttpError(\n        500,\n        studentErrorKeys.DELETE_STUDENT_FAIL,\n        studentErrorMessages[studentErrorKeys.DELETE_STUDENT_FAIL],\n        {},\n      );\n    }\n  }\n}\n"]}