{"file":"/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/challenge-full-stack-web/api/src/domain/user/entities/user.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAQiB;AACjB,iDAAmC;AAGnC,IAAqB,IAAI,GAAzB,MAAqB,IAAK,SAAQ,oBAAU;IAsB1C,KAAK,CAAC,YAAY;QAChB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;SACrD;IACH,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,QAAgB;QACrC,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9D,OAAO,OAAO,CAAC;IACjB,CAAC;CACF,CAAA;AA9BC;IADC,IAAA,gCAAsB,EAAC,MAAM,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;gCACpC;AAGX;IADC,IAAA,gBAAM,EAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;;mCACX;AAGd;IADC,IAAA,gBAAM,GAAE;;kCACI;AAGb;IADC,IAAA,gBAAM,GAAE;;sCACQ;AAIjB;IAFC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;IAC9B,IAAA,0BAAgB,GAAE;8BACR,IAAI;uCAAC;AAIhB;IAFC,IAAA,gBAAM,EAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;IAC9B,IAAA,0BAAgB,GAAE;8BACR,IAAI;uCAAC;AAGhB;IADC,IAAA,sBAAY,GAAE;;;;wCAKd;AA1BkB,IAAI;IADxB,IAAA,gBAAM,GAAE;GACY,IAAI,CAgCxB;kBAhCoB,IAAI","names":[],"sources":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/challenge-full-stack-web/api/src/domain/user/entities/user.ts"],"sourcesContent":["import {\n  BaseEntity,\n  BeforeInsert,\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport * as bcrypt from 'bcryptjs';\n\n@Entity()\nexport default class User extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid', { name: 'id' })\n  id: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column()\n  name: string;\n\n  @Column()\n  password: string;\n\n  @Column({ name: 'created_at' })\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @Column({ name: 'updated_at' })\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @BeforeInsert()\n  async hashPassword() {\n    if (this.password) {\n      this.password = await bcrypt.hash(this.password, 8);\n    }\n  }\n\n  async validatePassword(password: string): Promise<boolean> {\n    const isValid = await bcrypt.compare(password, this.password);\n    return isValid;\n  }\n}\n"],"version":3}