eda5ed1fe4baea763747b697fafa66b5
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('./repository');
const express_1 = require("@jest-mock/express");
const faker_1 = require("@faker-js/faker");
const repository_1 = __importDefault(require("./repository"));
const controller_1 = __importDefault(require("./controller"));
const RepositoryMock = repository_1.default;
describe('Test post controller', () => {
    beforeEach(async () => {
        RepositoryMock.prototype.createStudent.mockRestore();
        RepositoryMock.prototype.listStudents.mockRestore();
        RepositoryMock.prototype.updateStudent.mockRestore();
        RepositoryMock.prototype.deleteStudent.mockRestore();
    });
    test('Should response 200 when call listStudents with sucess', async () => {
        const mockRequest = (0, express_1.getMockReq)();
        const studentsMock = [
            {
                id: faker_1.faker.datatype.uuid(),
                name: faker_1.faker.internet.userName(),
                email: faker_1.faker.internet.email(),
                ra: faker_1.faker.datatype.string(),
                cpf: faker_1.faker.datatype.string(),
                createdAt: faker_1.faker.datatype.datetime(),
                updatedAt: faker_1.faker.datatype.datetime(),
            },
            {
                id: faker_1.faker.datatype.uuid(),
                name: faker_1.faker.internet.userName(),
                email: faker_1.faker.internet.email(),
                ra: faker_1.faker.datatype.string(),
                cpf: faker_1.faker.datatype.string(),
                createdAt: faker_1.faker.datatype.datetime(),
                updatedAt: faker_1.faker.datatype.datetime(),
            },
        ];
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.listStudents.mockResolvedValue(studentsMock);
        await controller_1.default.listStudents(mockRequest, res, next);
        expect(RepositoryMock.prototype.listStudents).toBeCalledTimes(1);
        expect(RepositoryMock.prototype.listStudents).toBeCalledWith();
        expect(res.status).toBeCalledTimes(1);
        expect(res.status).toBeCalledWith(200);
        expect(res.json).toBeCalledTimes(1);
        expect(next).toBeCalledTimes(0);
    });
    test('Should return error when call getUser with exception', async () => {
        const mockRequest = (0, express_1.getMockReq)();
        const mockError = new Error('Any Error.');
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.listStudents.mockRejectedValue(mockError);
        await controller_1.default.listStudents(mockRequest, res, next);
        expect(RepositoryMock.prototype.listStudents).toBeCalledTimes(1);
        expect(res.status).not.toBeCalled();
        expect(res.json).not.toBeCalled();
        expect(next).toBeCalledTimes(1);
        expect(next).toBeCalledWith(mockError);
    });
    test('Should response 201 when call createStudent with sucess', async () => {
        const studentMock = {
            name: faker_1.faker.internet.userName(),
            email: faker_1.faker.internet.email(),
            cpf: faker_1.faker.datatype.string(),
        };
        const mockRequest = (0, express_1.getMockReq)({
            body: studentMock,
        });
        const studentResponseMock = {
            name: studentMock.name,
            email: studentMock.email,
            cpf: studentMock.cpf,
            ra: faker_1.faker.datatype.string(),
            id: faker_1.faker.datatype.uuid(),
            createdAt: faker_1.faker.datatype.datetime(),
            updatedAt: faker_1.faker.datatype.datetime(),
        };
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.createStudent.mockResolvedValue(studentResponseMock);
        await controller_1.default.createStudent(mockRequest, res, next);
        expect(RepositoryMock.prototype.createStudent).toBeCalledTimes(1);
        expect(RepositoryMock.prototype.createStudent).toBeCalledWith(studentMock);
        expect(res.status).toBeCalledTimes(1);
        expect(res.status).toBeCalledWith(201);
        expect(res.json).toBeCalledTimes(1);
        expect(next).toBeCalledTimes(0);
    });
    test('Should return error when call createStudent with exception', async () => {
        const mockRequest = (0, express_1.getMockReq)();
        const mockError = new Error('Any Error.');
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.createStudent.mockRejectedValue(mockError);
        await controller_1.default.createStudent(mockRequest, res, next);
        expect(RepositoryMock.prototype.createStudent).toBeCalledTimes(1);
        expect(res.status).not.toBeCalled();
        expect(res.json).not.toBeCalled();
        expect(next).toBeCalledTimes(1);
        expect(next).toBeCalledWith(mockError);
    });
    test('Should response 204 when call deleteStudent with sucess', async () => {
        const fakeStudentId = faker_1.faker.datatype.uuid();
        const mockRequest = (0, express_1.getMockReq)({
            params: {
                id: fakeStudentId,
            },
        });
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.deleteStudent.mockResolvedValue();
        await controller_1.default.deleteStudent(mockRequest, res, next);
        expect(RepositoryMock.prototype.deleteStudent).toBeCalledTimes(1);
        expect(RepositoryMock.prototype.deleteStudent).toBeCalledWith(fakeStudentId);
        expect(res.status).toBeCalledTimes(1);
        expect(res.status).toBeCalledWith(204);
        expect(res.json).toBeCalledTimes(1);
        expect(next).toBeCalledTimes(0);
    });
    test('Should return error when call deleteStudent with exception', async () => {
        const mockRequest = (0, express_1.getMockReq)();
        const mockError = new Error('Any Error.');
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.deleteStudent.mockRejectedValue(mockError);
        await controller_1.default.deleteStudent(mockRequest, res, next);
        expect(RepositoryMock.prototype.deleteStudent).toBeCalledTimes(1);
        expect(res.status).not.toBeCalled();
        expect(res.json).not.toBeCalled();
        expect(next).toBeCalledTimes(1);
        expect(next).toBeCalledWith(mockError);
    });
    test('Should response 204 when call updateStudent with sucess', async () => {
        const fakeStudentId = faker_1.faker.datatype.uuid();
        const mockRequest = (0, express_1.getMockReq)({
            params: {
                id: fakeStudentId,
            },
        });
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.updateStudent.mockResolvedValue();
        await controller_1.default.updateStudent(mockRequest, res, next);
        expect(RepositoryMock.prototype.updateStudent).toBeCalledTimes(1);
        expect(RepositoryMock.prototype.updateStudent).toBeCalledWith({}, fakeStudentId);
        expect(res.status).toBeCalledTimes(1);
        expect(res.status).toBeCalledWith(204);
        expect(res.json).toBeCalledTimes(1);
        expect(next).toBeCalledTimes(0);
    });
    test('Should return error when call updateStudent with exception', async () => {
        const mockRequest = (0, express_1.getMockReq)();
        const mockError = new Error('Any Error.');
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.updateStudent.mockRejectedValue(mockError);
        await controller_1.default.updateStudent(mockRequest, res, next);
        expect(RepositoryMock.prototype.updateStudent).toBeCalledTimes(1);
        expect(res.status).not.toBeCalled();
        expect(res.json).not.toBeCalled();
        expect(next).toBeCalledTimes(1);
        expect(next).toBeCalledWith(mockError);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvZmlsaXBwb2lwcG9saXRvcm9kcmlndWVzL8OBcmVhIGRlIFRyYWJhbGhvL01ZUFJPSkVDVFMvY2hhbGxlbmdlLWZ1bGwtc3RhY2std2ViL2FwaS9zcmMvZG9tYWluL3N0dWRlbnQvY29udHJvbGxlci5zcGVjLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBTUEsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztBQU4xQixnREFBNEQ7QUFDNUQsMkNBQXdDO0FBQ3hDLDhEQUFzQztBQUN0Qyw4REFBc0M7QUFLdEMsTUFBTSxjQUFjLEdBQUcsb0JBQWlELENBQUM7QUFFekUsUUFBUSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtJQUNwQyxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsY0FBYyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckQsY0FBYyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDcEQsY0FBYyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckQsY0FBYyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsd0RBQXdELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDeEUsTUFBTSxXQUFXLEdBQUcsSUFBQSxvQkFBVSxHQUFFLENBQUM7UUFFakMsTUFBTSxZQUFZLEdBQWM7WUFDOUI7Z0JBQ0UsRUFBRSxFQUFFLGFBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFO2dCQUN6QixJQUFJLEVBQUUsYUFBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUU7Z0JBQy9CLEtBQUssRUFBRSxhQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRTtnQkFDN0IsRUFBRSxFQUFFLGFBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO2dCQUMzQixHQUFHLEVBQUUsYUFBSyxDQUFDLFFB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QUFDLENBQUM7UUFDbEUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvZmlsaXBwb2lwcG9saXRvcm9kcmlndWVzL8OBcmVhIGRlIFRyYWJhbGhvL01ZUFJPSkVDVFMvY2hhbGxlbmdlLWZ1bGwtc3RhY2std2ViL2FwaS9zcmMvZG9tYWluL3N0dWRlbnQvY29udHJvbGxlci5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldE1vY2tSZXEsIGdldE1vY2tSZXMgfSBmcm9tICdAamVzdC1tb2NrL2V4cHJlc3MnO1xuaW1wb3J0IHsgZmFrZXIgfSBmcm9tICdAZmFrZXItanMvZmFrZXInO1xuaW1wb3J0IFJlcG9zaXRvcnkgZnJvbSAnLi9yZXBvc2l0b3J5JztcbmltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcic7XG5pbXBvcnQgU3R1ZGVudCBmcm9tICcuL2VudGl0aWVzL3N0dWRlbnQnO1xuXG5qZXN0Lm1vY2soJy4vcmVwb3NpdG9yeScpO1xuXG5jb25zdCBSZXBvc2l0b3J5TW9jayA9IFJlcG9zaXRvcnkgYXMgamVzdC5Nb2NrZWRDbGFzczx0eXBlb2YgUmVwb3NpdG9yeT47XG5cbmRlc2NyaWJlKCdUZXN0IHBvc3QgY29udHJvbGxlcicsICgpID0+IHtcbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgUmVwb3NpdG9yeU1vY2sucHJvdG90eXBlLmNyZWF0ZVN0dWRlbnQubW9ja1Jlc3RvcmUoKTtcbiAgICBSZXBvc2l0b3J5TW9jay5wcm90b3R5cGUubGlzdFN0dWRlbnRzLm1vY2tSZXN0b3JlKCk7XG4gICAgUmVwb3NpdG9yeU1vY2sucHJvdG90eXBlLnVwZGF0ZVN0dWRlbnQubW9ja1Jlc3RvcmUoKTtcbiAgICBSZXBvc2l0b3J5TW9jay5wcm90b3R5cGUuZGVsZXRlU3R1ZGVudC5tb2NrUmVzdG9yZSgpO1xuICB9KTtcblxuICB0ZXN0KCdTaG91bGQgcmVzcG9uc2UgMjAwIHdoZW4gY2FsbCBsaXN0U3R1ZGVudHMgd2l0aCBzdWNlc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9ja1JlcXVlc3QgPSBnZXRNb2NrUmVxKCk7XG5cbiAgICBjb25zdCBzdHVkZW50c01vY2s6IFN0dWRlbnRbXSA9IFtcbiAgICAgIHtcbiAgICAgICAgaWQ6IGZha2VyLmRhdGF0eXBlLnV1aWQoKSxcbiAgICAgICAgbmFtZTogZmFrZXIuaW50ZXJuZXQudXNlck5hbWUoKSxcbiAgICAgICAgZW1haWw6IGZha2VyLmludGVybmV0LmVtYWlsKCksXG4gICAgICAgIHJhOiBmYWtlci5kYXRhdHlwZS5zdHJpbmcoKSxcbiAgICAgICAgY3BmOiBmYWtlci5kYXRhdHlwZS5zdHJpbmcoKSxcbiAgICAgICAgY3JlYXRlZEF0OiBmYWtlci5kYXRhdHlwZS5kYXRldGltZSgpLFxuICAgICAgICB1cGRhdGVkQXQ6IGZha2VyLmRhdGF0eXBlLmRhdGV0aW1lKCksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpZDogZmFrZXIuZGF0YXR5cGUudXVpZCgpLFxuICAgICAgICBuYW1lOiBmYWtlci5pbnRlcm5ldC51c2VyTmFtZSgpLFxuICAgICAgICBlbWFpbDogZmFrZXIuaW50ZXJuZXQuZW1haWwoKSxcbiAgICAgICAgcmE6IGZha2VyLmRhdGF0eXBlLnN0cmluZygpLFxuICAgICAgICBjcGY6IGZha2VyLmRhdGF0eXBlLnN0cmluZygpLFxuICAgICAgICBjcmVhdGVkQXQ6IGZha2VyLmRhdGF0eXBlLmRhdGV0aW1lKCksXG4gICAgICAgIHVwZGF0ZWRBdDogZmFrZXIuZGF0YXR5cGUuZGF0ZXRpbWUoKSxcbiAgICAgIH0sXG4gICAgXTtcblxuICAgIGNvbnN0IHsgcmVzLCBuZXh0IH0gPSBnZXRNb2NrUmVzKCk7XG5cbiAgICBSZXBvc2l0b3J5TW9jay5wcm90b3R5cGUubGlzdFN0dWRlbnRzLm1vY2tSZXNvbHZlZFZhbHVlKHN0dWRlbnRzTW9jayk7XG5cbiAgICBhd2FpdCBjb250cm9sbGVyLmxpc3RTdHVkZW50cyhtb2NrUmVxdWVzdCwgcmVzLCBuZXh0KTtcblxuICAgIGV4cGVjdChSZXBvc2l0b3J5TW9jay5wcm90b3R5cGUubGlzdFN0dWRlbnRzKS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KFJlcG9zaXRvcnlNb2NrLnByb3RvdHlwZS5saXN0U3R1ZGVudHMpLnRvQmVDYWxsZWRXaXRoKCk7XG4gICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZUNhbGxlZFdpdGgoMjAwKTtcbiAgICBleHBlY3QocmVzLmpzb24pLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QobmV4dCkudG9CZUNhbGxlZFRpbWVzKDApO1xuICB9KTtcblxuICB0ZXN0KCdTaG91bGQgcmV0dXJuIGVycm9yIHdoZW4gY2FsbCBnZXRVc2VyIHdpdGggZXhjZXB0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tSZXF1ZXN0ID0gZ2V0TW9ja1JlcSgpO1xuXG4gICAgY29uc3QgbW9ja0Vycm9yID0gbmV3IEVycm9yKCdBbnkgRXJyb3IuJyk7XG5cbiAgICBjb25zdCB7IHJlcywgbmV4dCB9ID0gZ2V0TW9ja1JlcygpO1xuXG4gICAgUmVwb3NpdG9yeU1vY2sucHJvdG90eXBlLmxpc3RTdHVkZW50cy5tb2NrUmVqZWN0ZWRWYWx1ZShtb2NrRXJyb3IpO1xuXG4gICAgYXdhaXQgY29udHJvbGxlci5saXN0U3R1ZGVudHMobW9ja1JlcXVlc3QsIHJlcywgbmV4dCk7XG5cbiAgICBleHBlY3QoUmVwb3NpdG9yeU1vY2sucHJvdG90eXBlLmxpc3RTdHVkZW50cykudG9CZUNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzKS5ub3QudG9CZUNhbGxlZCgpO1xuICAgIGV4cGVjdChyZXMuanNvbikubm90LnRvQmVDYWxsZWQoKTtcbiAgICBleHBlY3QobmV4dCkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChuZXh0KS50b0JlQ2FsbGVkV2l0aChtb2NrRXJyb3IpO1xuICB9KTtcblxuICB0ZXN0KCdTaG91bGQgcmVzcG9uc2UgMjAxIHdoZW4gY2FsbCBjcmVhdGVTdHVkZW50IHdpdGggc3VjZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHN0dWRlbnRNb2NrID0ge1xuICAgICAgbmFtZTogZmFrZXIuaW50ZXJuZXQudXNlck5hbWUoKSxcbiAgICAgIGVtYWlsOiBmYWtlci5pbnRlcm5ldC5lbWFpbCgpLFxuICAgICAgY3BmOiBmYWtlci5kYXRhdHlwZS5zdHJpbmcoKSxcbiAgICB9O1xuXG4gICAgY29uc3QgbW9ja1JlcXVlc3QgPSBnZXRNb2NrUmVxKHtcbiAgICAgIGJvZHk6IHN0dWRlbnRNb2NrLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3R1ZGVudFJlc3BvbnNlTW9jazogU3R1ZGVudCA9IHtcbiAgICAgIG5hbWU6IHN0dWRlbnRNb2NrLm5hbWUsXG4gICAgICBlbWFpbDogc3R1ZGVudE1vY2suZW1haWwsXG4gICAgICBjcGY6IHN0dWRlbnRNb2NrLmNwZixcbiAgICAgIHJhOiBmYWtlci5kYXRhdHlwZS5zdHJpbmcoKSxcbiAgICAgIGlkOiBmYWtlci5kYXRhdHlwZS51dWlkKCksXG4gICAgICBjcmVhdGVkQXQ6IGZha2VyLmRhdGF0eXBlLmRhdGV0aW1lKCksXG4gICAgICB1cGRhdGVkQXQ6IGZha2VyLmRhdGF0eXBlLmRhdGV0aW1lKCksXG4gICAgfTtcblxuICAgIGNvbnN0IHsgcmVzLCBuZXh0IH0gPSBnZXRNb2NrUmVzKCk7XG5cbiAgICBSZXBvc2l0b3J5TW9jay5wcm90b3R5cGUuY3JlYXRlU3R1ZGVudC5tb2NrUmVzb2x2ZWRWYWx1ZShzdHVkZW50UmVzcG9uc2VNb2NrKTtcblxuICAgIGF3YWl0IGNvbnRyb2xsZXIuY3JlYXRlU3R1ZGVudChtb2NrUmVxdWVzdCwgcmVzLCBuZXh0KTtcblxuICAgIGV4cGVjdChSZXBvc2l0b3J5TW9jay5wcm90b3R5cGUuY3JlYXRlU3R1ZGVudCkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChSZXBvc2l0b3J5TW9jay5wcm90b3R5cGUuY3JlYXRlU3R1ZGVudCkudG9CZUNhbGxlZFdpdGgoc3R1ZGVudE1vY2spO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmVDYWxsZWRXaXRoKDIwMSk7XG4gICAgZXhwZWN0KHJlcy5qc29uKS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KG5leHQpLnRvQmVDYWxsZWRUaW1lcygwKTtcbiAgfSk7XG5cbiAgdGVzdCgnU2hvdWxkIHJldHVybiBlcnJvciB3aGVuIGNhbGwgY3JlYXRlU3R1ZGVudCB3aXRoIGV4Y2VwdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrUmVxdWVzdCA9IGdldE1vY2tSZXEoKTtcblxuICAgIGNvbnN0IG1vY2tFcnJvciA9IG5ldyBFcnJvcignQW55IEVycm9yLicpO1xuXG4gICAgY29uc3QgeyByZXMsIG5leHQgfSA9IGdldE1vY2tSZXMoKTtcblxuICAgIFJlcG9zaXRvcnlNb2NrLnByb3RvdHlwZS5jcmVhdGVTdHVkZW50Lm1vY2tSZWplY3RlZFZhbHVlKG1vY2tFcnJvcik7XG5cbiAgICBhd2FpdCBjb250cm9sbGVyLmNyZWF0ZVN0dWRlbnQobW9ja1JlcXVlc3QsIHJlcywgbmV4dCk7XG5cbiAgICBleHBlY3QoUmVwb3NpdG9yeU1vY2sucHJvdG90eXBlLmNyZWF0ZVN0dWRlbnQpLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QocmVzLnN0YXR1cykubm90LnRvQmVDYWxsZWQoKTtcbiAgICBleHBlY3QocmVzLmpzb24pLm5vdC50b0JlQ2FsbGVkKCk7XG4gICAgZXhwZWN0KG5leHQpLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QobmV4dCkudG9CZUNhbGxlZFdpdGgobW9ja0Vycm9yKTtcbiAgfSk7XG5cbiAgdGVzdCgnU2hvdWxkIHJlc3BvbnNlIDIwNCB3aGVuIGNhbGwgZGVsZXRlU3R1ZGVudCB3aXRoIHN1Y2VzcycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBmYWtlU3R1ZGVudElkID0gZmFrZXIuZGF0YXR5cGUudXVpZCgpO1xuXG4gICAgY29uc3QgbW9ja1JlcXVlc3QgPSBnZXRNb2NrUmVxKHtcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBpZDogZmFrZVN0dWRlbnRJZCxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBjb25zdCB7IHJlcywgbmV4dCB9ID0gZ2V0TW9ja1JlcygpO1xuXG4gICAgUmVwb3NpdG9yeU1vY2sucHJvdG90eXBlLmRlbGV0ZVN0dWRlbnQubW9ja1Jlc29sdmVkVmFsdWUoKTtcblxuICAgIGF3YWl0IGNvbnRyb2xsZXIuZGVsZXRlU3R1ZGVudChtb2NrUmVxdWVzdCwgcmVzLCBuZXh0KTtcblxuICAgIGV4cGVjdChSZXBvc2l0b3J5TW9jay5wcm90b3R5cGUuZGVsZXRlU3R1ZGVudCkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChSZXBvc2l0b3J5TW9jay5wcm90b3R5cGUuZGVsZXRlU3R1ZGVudCkudG9CZUNhbGxlZFdpdGgoZmFrZVN0dWRlbnRJZCk7XG4gICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZUNhbGxlZFdpdGgoMjA0KTtcbiAgICBleHBlY3QocmVzLmpzb24pLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QobmV4dCkudG9CZUNhbGxlZFRpbWVzKDApO1xuICB9KTtcblxuICB0ZXN0KCdTaG91bGQgcmV0dXJuIGVycm9yIHdoZW4gY2FsbCBkZWxldGVTdHVkZW50IHdpdGggZXhjZXB0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tSZXF1ZXN0ID0gZ2V0TW9ja1JlcSgpO1xuXG4gICAgY29uc3QgbW9ja0Vycm9yID0gbmV3IEVycm9yKCdBbnkgRXJyb3IuJyk7XG5cbiAgICBjb25zdCB7IHJlcywgbmV4dCB9ID0gZ2V0TW9ja1JlcygpO1xuXG4gICAgUmVwb3NpdG9yeU1vY2sucHJvdG90eXBlLmRlbGV0ZVN0dWRlbnQubW9ja1JlamVjdGVkVmFsdWUobW9ja0Vycm9yKTtcblxuICAgIGF3YWl0IGNvbnRyb2xsZXIuZGVsZXRlU3R1ZGVudChtb2NrUmVxdWVzdCwgcmVzLCBuZXh0KTtcblxuICAgIGV4cGVjdChSZXBvc2l0b3J5TW9jay5wcm90b3R5cGUuZGVsZXRlU3R1ZGVudCkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzKS5ub3QudG9CZUNhbGxlZCgpO1xuICAgIGV4cGVjdChyZXMuanNvbikubm90LnRvQmVDYWxsZWQoKTtcbiAgICBleHBlY3QobmV4dCkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChuZXh0KS50b0JlQ2FsbGVkV2l0aChtb2NrRXJyb3IpO1xuICB9KTtcblxuICB0ZXN0KCdTaG91bGQgcmVzcG9uc2UgMjA0IHdoZW4gY2FsbCB1cGRhdGVTdHVkZW50IHdpdGggc3VjZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGZha2VTdHVkZW50SWQgPSBmYWtlci5kYXRhdHlwZS51dWlkKCk7XG5cbiAgICBjb25zdCBtb2NrUmVxdWVzdCA9IGdldE1vY2tSZXEoe1xuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGlkOiBmYWtlU3R1ZGVudElkLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgcmVzLCBuZXh0IH0gPSBnZXRNb2NrUmVzKCk7XG5cbiAgICBSZXBvc2l0b3J5TW9jay5wcm90b3R5cGUudXBkYXRlU3R1ZGVudC5tb2NrUmVzb2x2ZWRWYWx1ZSgpO1xuXG4gICAgYXdhaXQgY29udHJvbGxlci51cGRhdGVTdHVkZW50KG1vY2tSZXF1ZXN0LCByZXMsIG5leHQpO1xuXG4gICAgZXhwZWN0KFJlcG9zaXRvcnlNb2NrLnByb3RvdHlwZS51cGRhdGVTdHVkZW50KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KFJlcG9zaXRvcnlNb2NrLnByb3RvdHlwZS51cGRhdGVTdHVkZW50KS50b0JlQ2FsbGVkV2l0aCh7fSwgZmFrZVN0dWRlbnRJZCk7XG4gICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QocmVzLnN0YXR1cykudG9CZUNhbGxlZFdpdGgoMjA0KTtcbiAgICBleHBlY3QocmVzLmpzb24pLnRvQmVDYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QobmV4dCkudG9CZUNhbGxlZFRpbWVzKDApO1xuICB9KTtcblxuICB0ZXN0KCdTaG91bGQgcmV0dXJuIGVycm9yIHdoZW4gY2FsbCB1cGRhdGVTdHVkZW50IHdpdGggZXhjZXB0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tSZXF1ZXN0ID0gZ2V0TW9ja1JlcSgpO1xuXG4gICAgY29uc3QgbW9ja0Vycm9yID0gbmV3IEVycm9yKCdBbnkgRXJyb3IuJyk7XG5cbiAgICBjb25zdCB7IHJlcywgbmV4dCB9ID0gZ2V0TW9ja1JlcygpO1xuXG4gICAgUmVwb3NpdG9yeU1vY2sucHJvdG90eXBlLnVwZGF0ZVN0dWRlbnQubW9ja1JlamVjdGVkVmFsdWUobW9ja0Vycm9yKTtcblxuICAgIGF3YWl0IGNvbnRyb2xsZXIudXBkYXRlU3R1ZGVudChtb2NrUmVxdWVzdCwgcmVzLCBuZXh0KTtcblxuICAgIGV4cGVjdChSZXBvc2l0b3J5TW9jay5wcm90b3R5cGUudXBkYXRlU3R1ZGVudCkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzKS5ub3QudG9CZUNhbGxlZCgpO1xuICAgIGV4cGVjdChyZXMuanNvbikubm90LnRvQmVDYWxsZWQoKTtcbiAgICBleHBlY3QobmV4dCkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChuZXh0KS50b0JlQ2FsbGVkV2l0aChtb2NrRXJyb3IpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9