{"file":"/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/challenge-full-stack-web/api/src/domain/user/repository.spec.ts","mappings":";;;;;AAKA,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAL7B,2CAAwC;AACxC,8DAA6D;AAC7D,8DAA0C;AAK1C,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,UAAU,CAAC,GAAG,EAAE;QACd,6BAAc,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAClC,6BAAc,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QACpC,6BAAc,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;QAC5D,MAAM,QAAQ,GAAG;YACf,IAAI,EAAE,aAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE;YAC/B,KAAK,EAAE,aAAK,CAAC,QAAQ,CAAC,KAAK,EAAE;YAC7B,QAAQ,EAAE,aAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE;SACpC,CAAC;QAEF,MAAM,gBAAgB,GAAG;YACvB,EAAE,EAAE,aAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;YACzB,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,KAAK,EAAE,QAAQ,CAAC,KAAK;YACrB,SAAS,EAAE,aAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACpC,SAAS,EAAE,aAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE;SAC7B,CAAC;QAEV,6BAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,6BAAc,CAAC,MAAM,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAEjG,MAAM,cAAc,GAAG,IAAI,oBAAc,EAAE,CAAC;QAC5C,MAAM,WAAW,GAAG,MAAM,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAE9D,MAAM,CAAC,6BAAc,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,6BAAc,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QACrD,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;QACrE,MAAM,QAAQ,GAAG;YACf,IAAI,EAAE,aAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE;YAC/B,KAAK,EAAE,aAAK,CAAC,QAAQ,CAAC,KAAK,EAAE;YAC7B,QAAQ,EAAE,aAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE;SACpC,CAAC;QACF,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;QAC1C,6BAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QAEjD,IAAI;YACF,MAAM,cAAc,GAAG,IAAI,oBAAc,EAAE,CAAC;YAC5C,MAAM,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;SAC3C;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,CAAC,6BAAc,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,6BAAc,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YACrD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YAC1C,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SACvC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/challenge-full-stack-web/api/src/domain/user/repository.spec.ts"],"sourcesContent":["import { faker } from '@faker-js/faker';\nimport { repositoryMock } from '../../../mocks/typeorm.mock';\nimport UserRepository from './repository';\nimport User from './entities/user';\n\njest.mock('./entities/User');\n\ndescribe('Test user repository', () => {\n  beforeEach(() => {\n    repositoryMock.save.mockRestore();\n    repositoryMock.create.mockRestore();\n    repositoryMock.delete.mockRestore();\n  });\n\n  test('Should return created product with success', async () => {\n    const userMock = {\n      name: faker.internet.userName(),\n      email: faker.internet.email(),\n      password: faker.internet.password(),\n    };\n\n    const userResponseMock = {\n      id: faker.datatype.uuid(),\n      name: userMock.name,\n      email: userMock.email,\n      createdAt: faker.datatype.datetime(),\n      updatedAt: faker.datatype.datetime(),\n    } as User;\n\n    repositoryMock.save.mockResolvedValue(repositoryMock.create.mockResolvedValue(userResponseMock));\n\n    const userRepository = new UserRepository();\n    const createdUser = await userRepository.createUser(userMock);\n\n    expect(repositoryMock.save).toBeCalledTimes(1);\n    expect(repositoryMock.save).toBeCalledWith(userMock);\n    expect(createdUser).toEqual(userResponseMock);\n  });\n\n  test('Should return error when call create with exception', async () => {\n    const userMock = {\n      name: faker.internet.userName(),\n      email: faker.internet.email(),\n      password: faker.internet.password(),\n    };\n    const mockError = new Error('Any Error.');\n    repositoryMock.save.mockRejectedValue(mockError);\n\n    try {\n      const userRepository = new UserRepository();\n      await userRepository.createUser(userMock);\n    } catch (error) {\n      expect(repositoryMock.save).toBeCalledTimes(1);\n      expect(repositoryMock.save).toBeCalledWith(userMock);\n      expect(error.code).toEqual('PRODUCT-001');\n      expect(error.statusCode).toEqual(500);\n    }\n  });\n});\n"],"version":3}