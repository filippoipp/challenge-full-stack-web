{"file":"/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/challenge-full-stack-web/api/src/domain/user/controller.spec.ts","mappings":"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","names":[],"sources":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/challenge-full-stack-web/api/src/domain/user/controller.spec.ts"],"sourcesContent":["import { getMockReq, getMockRes } from '@jest-mock/express';\nimport { faker } from '@faker-js/faker';\nimport Repository from './repository';\nimport controller from './controller';\nimport User from './entities/user';\n\njest.mock('./repository');\n\nconst RepositoryMock = Repository as jest.MockedClass<typeof Repository>;\n\ndescribe('Test post controller', () => {\n  beforeEach(async () => {\n    RepositoryMock.prototype.createUser.mockRestore();\n  });\n\n  test('Should response 201 when call createUser with sucess', async () => {\n    const userMock = {\n      name: faker.internet.userName(),\n      email: faker.internet.email(),\n      password: faker.internet.password(),\n    };\n\n    const mockRequest = getMockReq({\n      body: userMock,\n    });\n\n    const userResponseMock = {\n      id: faker.datatype.uuid(),\n      name: userMock.name,\n      email: userMock.email,\n      createdAt: faker.datatype.datetime(),\n      updatedAt: faker.datatype.datetime(),\n    } as User;\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.createUser.mockResolvedValue(userResponseMock);\n\n    await controller.createUser(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.createUser).toBeCalledTimes(1);\n    expect(RepositoryMock.prototype.createUser).toBeCalledWith(userMock);\n    expect(res.status).toBeCalledTimes(1);\n    expect(res.status).toBeCalledWith(201);\n    expect(res.json).toBeCalledTimes(1);\n    expect(next).toBeCalledTimes(0);\n  });\n\n  test('Should return error when call createUser with exception', async () => {\n    const mockRequest = getMockReq();\n\n    const mockError = new Error('Any Error.');\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.createUser.mockRejectedValue(mockError);\n\n    await controller.createUser(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.createUser).toBeCalledTimes(1);\n    expect(res.status).not.toBeCalled();\n    expect(res.json).not.toBeCalled();\n    expect(next).toBeCalledTimes(1);\n    expect(next).toBeCalledWith(mockError);\n  });\n});\n"],"version":3}