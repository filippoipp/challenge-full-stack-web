36eaaef7c9ed281d15978dfc9e2a4af2
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = __importDefault(require("crypto"));
const joi_1 = __importDefault(require("@hapi/joi"));
const express_1 = require("@jest-mock/express");
const http_error_1 = __importDefault(require("../errors/http-error"));
const validation_1 = require("./validation");
const keycloakRequest = joi_1.default.object({
    keycloakTokenModel: joi_1.default.object({
        idAccount: joi_1.default.string().required(),
    }).required(),
});
const anyParams = joi_1.default.object({
    idAccount: joi_1.default.string().required(),
});
const anyBody = joi_1.default.object({
    idAccount: joi_1.default.string().required(),
});
const fakeValue = () => crypto_1.default.randomBytes(32).toString('hex');
describe('Test validation middleware', () => {
    test('Should call next with error when called validateRequest with object empty', async () => {
        const mockRequest = (0, express_1.getMockReq)({
            keycloakTokenModel: {},
        });
        const httpError = new http_error_1.default(422, 'SERVER-422', 'Validation error', [
            { idAccount: 'keycloakTokenModel.idAccount is required' },
        ]);
        const { res, next } = (0, express_1.getMockRes)();
        const middleware = (0, validation_1.validateRequest)(keycloakRequest);
        await middleware(mockRequest, res, next);
        expect(next).toHaveBeenCalledTimes(1);
        expect(next).toHaveBeenCalledWith(httpError);
    });
    test('Should call next with error when called validateRequest with object undefined', async () => {
        const mockRequest = (0, express_1.getMockReq)({
            keycloakTokenModel: undefined,
        });
        const httpError = new http_error_1.default(422, 'SERVER-422', 'Validation error', [
            { idAccount: 'keycloakTokenModel is required' },
        ]);
        const { res, next } = (0, express_1.getMockRes)();
        const middleware = (0, validation_1.validateRequest)(keycloakRequest);
        await middleware(mockRequest, res, next);
        expect(next).toHaveBeenCalledTimes(1);
        expect(next).toHaveBeenCalledWith(httpError);
    });
    test('Should call next with empty when called validateRequest with object valid', async () => {
        const mockRequest = (0, express_1.getMockReq)({
            keycloakTokenModel: {
                idAccount: fakeValue(),
            },
        });
        const { res, next } = (0, express_1.getMockRes)();
        const middleware = (0, validation_1.validateRequest)(keycloakRequest);
        await middleware(mockRequest, res, next);
        expect(next).toHaveBeenCalledTimes(1);
        expect(next).toHaveBeenCalledWith();
    });
    test('Should call next with error when called validateParams with object empty', async () => {
        const mockRequest = (0, express_1.getMockReq)({
            params: {},
        });
        const httpError = new http_error_1.default(422, 'SERVER-422', 'Validation error', [
            { idAccount: 'idAccount is required' },
        ]);
        const { res, next } = (0, express_1.getMockRes)();
        const middleware = (0, validation_1.validateParams)(anyParams);
        await middleware(mockRequest, res, next);
        expect(next).toHaveBeenCalledTimes(1);
        expect(next).toHaveBeenCalledWith(httpError);
    });
    test('Should call next with empty when called validateParams with object valid', async () => {
        const mockRequest = (0, express_1.getMockReq)({
            params: {
                idAccount: fakeValue(),
            },
        });
        const { res, next } = (0, express_1.getMockRes)();
        const middleware = (0, validation_1.validateParams)(anyParams);
        await middleware(mockRequest, res, next);
        expect(next).toHaveBeenCalledTimes(1);
        expect(next).toHaveBeenCalledWith();
    });
    test('Should call next with error when called validateQuery with object empty', async () => {
        const mockRequest = (0, express_1.getMockReq)({
            query: {},
        });
        const httpError = new http_error_1.default(422, 'SERVER-422', 'Validation error', [
            { idAccount: 'idAccount is required' },
        ]);
        const { res, next } = (0, express_1.getMockRes)();
        const middleware = (0, validation_1.validateQuery)(anyParams);
        await middleware(mockRequest, res, next);
        expect(next).toHaveBeenCalledTimes(1);
        expect(next).toHaveBeenCalledWith(httpError);
    });
    test('Should call next with empty when called validateQuery with object valid', async () => {
        const mockRequest = (0, express_1.getMockReq)({
            query: {
                idAccount: fakeValue(),
            },
        });
        const { res, next } = (0, express_1.getMockRes)();
        const middleware = (0, validation_1.validateQuery)(anyParams);
        await middleware(mockRequest, res, next);
        expect(next).toHaveBeenCalledTimes(1);
        expect(next).toHaveBeenCalledWith();
    });
    test('Should call next with error when called validateBody with object empty', async () => {
        const mockRequest = (0, express_1.getMockReq)({
            body: {},
        });
        const httpError = new http_error_1.default(422, 'SERVER-422', 'Validation error', [
            { idAccount: 'idAccount is required' },
        ]);
        const { res, next } = (0, express_1.getMockRes)();
        const middleware = (0, validation_1.validateBody)(anyBody);
        await middleware(mockRequest, res, next);
        expect(next).toHaveBeenCalledTimes(1);
        expect(next).toHaveBeenCalledWith(httpError);
    });
    test('Should call next with empty when called validateBody with object valid', async () => {
        const mockRequest = (0, express_1.getMockReq)({
            body: {
                idAccount: fakeValue(),
            },
        });
        const { res, next } = (0, express_1.getMockRes)();
        const middleware = (0, validation_1.validateBody)(anyBody);
        await middleware(mockRequest, res, next);
        expect(next).toHaveBeenCalledTimes(1);
        expect(next).toHaveBeenCalledWith();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,