{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAaM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAbN;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;;AAGA,MAAqBA,cAArB,CAAmC;EACP,MAAZC,YAAY,CAACC,QAAD,EAA6B;IAAA;IAAA;IACrD,MAAM;MAAEC,KAAF;MAASC;IAAT;IAAA;IAAA,0BAAsBF,QAAtB,CAAN;IACA,MAAMG,cAAc;IAAA;IAAA,0BAAG,IAAIC,oBAAJ,EAAH,CAApB;IACA,MAAMC,IAAI;IAAA;IAAA,0BAAG,MAAMF,cAAc,CAACG,WAAf,CAA2BL,KAA3B,CAAT,CAAV;;IAHqD;IAAA;;IAIrD,IAAI,EAAE,MAAMI,IAAI,CAACE,gBAAL,CAAsBL,QAAtB,CAAR,CAAJ,EAA8C;MAAA;MAAA;MAAA;MAC5C,MAAM,IAAIM,KAAJ,EAAN;IACD,CAFD;IAAA;IAAA;MAAA;IAAA;;IAJqD;IAQrD,OAAOH,IAAP;EACD;;EAEuB,MAAXI,WAAW,CAACT,QAAD,EAA6B;IAAA;IAAA;IAAA;;IACnD,IAAI;MACF,MAAMK,IAAI;MAAA;MAAA,2BAAG,MAAM,KAAKN,YAAL,CAAkBC,QAAlB,CAAT,CAAV;;MADE;MAAA;MAEF,OAAOK,IAAI,CAACH,QAAZ;;MAFE;MAAA;MAIF,OAAO,EACL,GAAGG,IADE;QAELK,YAAY,EAAE;MAFT,CAAP;IAID,CARD,CAQE,OAAOC,KAAP,EAAc;MAAA;MAAA;MACd,MAAM,IAAIC,oBAAJ,CACJ,GADI,EAEJC,qBAAcC,iBAFV,EAGJD,yBAAkBA,qBAAcC,iBAAhC,CAHI,EAIJ,EAJI,CAAN;IAMD;EACF;;AA7BgC;;;;AAAnCC","names":["AuthRepository","validateUser","authData","email","password","userRepository","repository_1","user","findByEmail","validatePassword","Error","createToken","access_token","error","http_error_1","auth_1","CREATE_TOKEN_FAIL","exports"],"sources":["/home/filippoippolitorodrigues/√Årea de Trabalho/MYPROJECTS/challenge-full-stack-web/api/src/domain/auth/repository.ts"],"sourcesContent":["import { authErrorKeys, authErrorMessages } from '../../errors/translator/auth';\nimport HttpError from '../../errors/http-error';\nimport CreateTokenRequest from './interfaces/inputs/create-token-dto';\nimport UserRepository from '../user/repository';\nimport { generateToken } from '../../utils/jwt.utils';\nimport CreateTokenResponse from './interfaces/outputs/create-token-dto';\n\nexport default class AuthRepository {\n  private async validateUser(authData: CreateTokenRequest) {\n    const { email, password } = authData;\n    const userRepository = new UserRepository();\n    const user = await userRepository.findByEmail(email);\n    if (!(await user.validatePassword(password))) {\n      throw new Error();\n    }\n\n    return user;\n  }\n\n  public async createToken(authData: CreateTokenRequest): Promise<CreateTokenResponse> {\n    try {\n      const user = await this.validateUser(authData);\n      delete user.password;\n\n      return {\n        ...user,\n        access_token: generateToken(),\n      };\n    } catch (error) {\n      throw new HttpError(\n        500,\n        authErrorKeys.CREATE_TOKEN_FAIL,\n        authErrorMessages[authErrorKeys.CREATE_TOKEN_FAIL],\n        {},\n      );\n    }\n  }\n}\n"]}