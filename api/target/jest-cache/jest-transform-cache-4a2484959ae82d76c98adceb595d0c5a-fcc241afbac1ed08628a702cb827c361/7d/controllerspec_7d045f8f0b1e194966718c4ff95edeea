8988e30dae9f9fa5dfb3312129be8010
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('./repository');
const express_1 = require("@jest-mock/express");
const faker_1 = require("@faker-js/faker");
const repository_1 = __importDefault(require("./repository"));
const controller_1 = __importDefault(require("./controller"));
const RepositoryMock = repository_1.default;
describe('Test post controller', () => {
    beforeEach(async () => {
        RepositoryMock.prototype.createStudent.mockRestore();
        RepositoryMock.prototype.listStudents.mockRestore();
        RepositoryMock.prototype.updateStudent.mockRestore();
        RepositoryMock.prototype.deleteStudent.mockRestore();
    });
    test('Should response 200 when call listStudents with sucess', async () => {
        const mockRequest = (0, express_1.getMockReq)();
        const studentsMock = [
            {
                id: faker_1.faker.datatype.uuid(),
                name: faker_1.faker.internet.userName(),
                email: faker_1.faker.internet.email(),
                ra: faker_1.faker.datatype.string(),
                cpf: faker_1.faker.datatype.string(),
                createdAt: faker_1.faker.datatype.datetime(),
                updatedAt: faker_1.faker.datatype.datetime(),
            },
            {
                id: faker_1.faker.datatype.uuid(),
                name: faker_1.faker.internet.userName(),
                email: faker_1.faker.internet.email(),
                ra: faker_1.faker.datatype.string(),
                cpf: faker_1.faker.datatype.string(),
                createdAt: faker_1.faker.datatype.datetime(),
                updatedAt: faker_1.faker.datatype.datetime(),
            },
        ];
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.listStudents.mockResolvedValue(studentsMock);
        await controller_1.default.listStudents(mockRequest, res, next);
        expect(RepositoryMock.prototype.listStudents).toBeCalledTimes(1);
        expect(RepositoryMock.prototype.listStudents).toBeCalledWith();
        expect(res.status).toBeCalledTimes(1);
        expect(res.status).toBeCalledWith(200);
        expect(res.json).toBeCalledTimes(1);
        expect(next).toBeCalledTimes(0);
    });
    test('Should return error when call getUser with exception', async () => {
        const mockRequest = (0, express_1.getMockReq)();
        const mockError = new Error('Any Error.');
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.listStudents.mockRejectedValue(mockError);
        await controller_1.default.listStudents(mockRequest, res, next);
        expect(RepositoryMock.prototype.listStudents).toBeCalledTimes(1);
        expect(res.status).not.toBeCalled();
        expect(res.json).not.toBeCalled();
        expect(next).toBeCalledTimes(1);
        expect(next).toBeCalledWith(mockError);
    });
    test('Should response 201 when call createStudent with sucess', async () => {
        const studentMock = {
            name: faker_1.faker.internet.userName(),
            email: faker_1.faker.internet.email(),
            cpf: faker_1.faker.datatype.string(),
        };
        const mockRequest = (0, express_1.getMockReq)({
            body: studentMock,
        });
        const studentResponseMock = {
            name: studentMock.name,
            email: studentMock.email,
            cpf: studentMock.cpf,
            ra: faker_1.faker.datatype.string(),
            id: faker_1.faker.datatype.uuid(),
            createdAt: faker_1.faker.datatype.datetime(),
            updatedAt: faker_1.faker.datatype.datetime(),
        };
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.createStudent.mockResolvedValue(studentResponseMock);
        await controller_1.default.createStudent(mockRequest, res, next);
        expect(RepositoryMock.prototype.createStudent).toBeCalledTimes(1);
        expect(RepositoryMock.prototype.createStudent).toBeCalledWith(studentMock);
        expect(res.status).toBeCalledTimes(1);
        expect(res.status).toBeCalledWith(201);
        expect(res.json).toBeCalledTimes(1);
        expect(next).toBeCalledTimes(0);
    });
    test('Should return error when call getUser with exception', async () => {
        const mockRequest = (0, express_1.getMockReq)();
        const mockError = new Error('Any Error.');
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.createStudent.mockRejectedValue(mockError);
        await controller_1.default.createStudent(mockRequest, res, next);
        expect(RepositoryMock.prototype.createStudent).toBeCalledTimes(1);
        expect(res.status).not.toBeCalled();
        expect(res.json).not.toBeCalled();
        expect(next).toBeCalledTimes(1);
        expect(next).toBeCalledWith(mockError);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,