{"version":3,"mappingsqBA,cAArB,CAAmC;EACb,MAAPC,OAAO,CAACC,QAAD,EAAiB;IAAA;IAAA;IAAA;;IACnC,IAAI;MACF,MAAMC,cAAc;MAAA;MAAA,2BAAG,6BAAcC,cAAd,CAAH,CAApB;MACA,MAAMC,IAAI;MAAA;MAAA,2BAAG,MAAMF,cAAc,CAACG,OAAf,CAAuB;QACxCC,KAAK,EAAE;UACLL;QADK;MADiC,CAAvB,CAAT,CAAV;MAMA,MAAMM,cAAc;MAAA;MAAA,2BAAG,IAAIC,oBAAJ,EAAH,CAApB;MACA,MAAMC,SAAS;MAAA;MAAA,2BAAG,MAAMF,cAAc,CAACG,MAAf,CAAsB;QAAET;MAAF,CAAtB,CAAT,CAAf;;MATE;MAAA;MAWF,OAAO;QACLA,QADK;QAELU,SAAS,EAAE,sBAAOP,IAAI,CAACO,SAAZ,EAAuBC,MAAvB,CAA8B,eAA9B,CAFN;QAGLC,UAAU,EAAEJ,SAAS,CAACK;MAHjB,CAAP;IAKD,CAhBD,CAgBE,OAAOC,KAAP,EAAc;MAAA;MAAA;MACd,MAAM,IAAIC,oBAAJ,CACJ,GADI,EAEJC,qBAAcC,cAFV,EAGJD,yBAAkBA,qBAAcC,cAAhC,CAHI,EAIJ,EAJI,CAAN;IAMD;EACF;;AA1BgC;;;;AAAnCC","names":["UserRepository","getUser","username","userRepository","user_2","user","findOne","where","postRepository","repository_1","userPosts","getAll","createdAt","format","postsCount","count","error","http_error_1","user_1","GET_USER_FAILS","exports"],"sources":["/home/filippoippolitorodrigues/√Årea de Trabalho/MYPROJECTS/strider/src/domain/user/repository.ts"],"sourcesContent":["import { getRepository } from 'typeorm';\nimport moment from 'moment';\nimport PostRepository from '../post/repository';\nimport { userErrorKeys, userErrorMessages } from '../../errors/translator/user';\nimport HttpError from '../../errors/http-error';\nimport User from './entities/user';\nimport GetUserResponse from './interfaces/get-user-response';\n\nexport default class UserRepository {\n  public async getUser(username: string): Promise<GetUserResponse> {\n    try {\n      const userRepository = getRepository(User);\n      const user = await userRepository.findOne({\n        where: {\n          username,\n        },\n      });\n\n      const postRepository = new PostRepository();\n      const userPosts = await postRepository.getAll({ username });\n\n      return {\n        username,\n        createdAt: moment(user.createdAt).format('MMMM DD, YYYY'),\n        postsCount: userPosts.count,\n      };\n    } catch (error) {\n      throw new HttpError(\n        500,\n        userErrorKeys.GET_USER_FAILS,\n        userErrorMessages[userErrorKeys.GET_USER_FAILS],\n        {},\n      );\n    }\n  }\n}\n"]}