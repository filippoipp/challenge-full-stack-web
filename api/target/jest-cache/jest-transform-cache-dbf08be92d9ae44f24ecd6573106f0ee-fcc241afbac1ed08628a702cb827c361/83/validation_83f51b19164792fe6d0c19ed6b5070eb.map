{"version":3,"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","names":["checkAndReturnValidationResult","schema","data","joiConfig","error","value","sanitizedData","validate","abortEarly","allowUnknown","report","details","map","detail","key","path","join","message","replace","http_error_1","validateRequest","joiSchema","req","res","next","err","exports","validateParams","params","stripUnknown","validateQuery","query","result","validateBody","body"],"sources":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/middlewares/validation.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\r\nimport { AnySchema } from '@hapi/joi';\r\nimport HttpError from '../errors/http-error';\r\n\r\nasync function checkAndReturnValidationResult(schema: AnySchema, data: any, joiConfig = {}) {\r\n  const { error, value: sanitizedData } = schema.validate(data, {\r\n    abortEarly: false,\r\n    allowUnknown: true,\r\n    ...joiConfig,\r\n  });\r\n\r\n  if (!error) {\r\n    return sanitizedData;\r\n  }\r\n\r\n  const report = error.details.map((detail) => {\r\n    const key = detail.path.join('.');\r\n    const message = detail.message.replace(/['\"]/g, '');\r\n    return { [key]: message };\r\n  });\r\n\r\n  throw new HttpError(422, 'SERVER-422', 'Validation error', report);\r\n}\r\n\r\nconst validateRequest = (joiSchema: AnySchema) => async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    await checkAndReturnValidationResult(joiSchema, req);\r\n    next();\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\nconst validateParams = (joiSchema: AnySchema) => async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    const { params } = req;\r\n    await checkAndReturnValidationResult(joiSchema, params, {\r\n      stripUnknown: true,\r\n    });\r\n    req.params = params;\r\n    next();\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\nconst validateQuery = (joiSchema: AnySchema) => async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    const { query } = req;\r\n    const result = await checkAndReturnValidationResult(joiSchema, query);\r\n    req.query = result;\r\n    next();\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\nconst validateBody = (joiSchema: AnySchema) => async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    const { body } = req;\r\n    await checkAndReturnValidationResult(joiSchema, body, {\r\n      stripUnknown: true,\r\n    });\r\n    req.body = body;\r\n    next();\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\nexport {\r\n  validateBody, validateParams, validateQuery, validateRequest,\r\n};\r\n"]}