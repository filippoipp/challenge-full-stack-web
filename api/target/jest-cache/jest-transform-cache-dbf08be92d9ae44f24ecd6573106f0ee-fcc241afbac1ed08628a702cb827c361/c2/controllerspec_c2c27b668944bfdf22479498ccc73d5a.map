{"file":"/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/controller.spec.ts","mappings":";;;;;AAMA,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAN1B,gDAA4D;AAC5D,2CAAwC;AACxC,8DAAsC;AACtC,8DAAsC;AAKtC,MAAM,cAAc,GAAG,oBAAiD,CAAC;AAEzE,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;QACnE,MAAM,QAAQ,GAAG,aAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QAEzC,MAAM,WAAW,GAAG,IAAA,oBAAU,EAAC;YAC7B,MAAM,EAAE;gBACN,QAAQ;aACT;SACF,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAoB;YAChC,QAAQ;YACR,SAAS,EAAE,aAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;YAClC,UAAU,EAAE,aAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;SACpC,CAAC;QAEF,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,IAAA,oBAAU,GAAE,CAAC;QAEnC,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAE7D,MAAM,oBAAU,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QAEjD,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC5D,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAClE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QACvC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACpC,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,QAAQ,GAAG,aAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QAEzC,MAAM,WAAW,GAAG,IAAA,oBAAU,EAAC;YAC7B,MAAM,EAAE;gBACN,QAAQ;aACT;SACF,CAAC,CAAC;QAEH,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;QAE1C,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,IAAA,oBAAU,GAAE,CAAC;QAEnC,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QAE9D,MAAM,oBAAU,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QAEjD,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC5D,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;QACpC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;QAClC,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/user/controller.spec.ts"],"sourcesContent":["import { getMockReq, getMockRes } from '@jest-mock/express';\nimport { faker } from '@faker-js/faker';\nimport Repository from './repository';\nimport controller from './controller';\nimport GetUserResponse from './interfaces/get-user-response';\n\njest.mock('./repository');\n\nconst RepositoryMock = Repository as jest.MockedClass<typeof Repository>;\n\ndescribe('Test post controller', () => {\n  beforeEach(async () => {\n    RepositoryMock.prototype.getUser.mockRestore();\n  });\n\n  test('Should response 200 when call getUser with sucess', async () => {\n    const username = faker.datatype.string();\n\n    const mockRequest = getMockReq({\n      params: {\n        username,\n      },\n    });\n\n    const userMock: GetUserResponse = {\n      username,\n      createdAt: faker.datatype.string(),\n      postsCount: faker.datatype.number(),\n    };\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.getUser.mockResolvedValue(userMock);\n\n    await controller.getUser(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.getUser).toBeCalledTimes(1);\n    expect(RepositoryMock.prototype.getUser).toBeCalledWith(username);\n    expect(res.status).toBeCalledTimes(1);\n    expect(res.status).toBeCalledWith(200);\n    expect(res.json).toBeCalledTimes(1);\n    expect(next).toBeCalledTimes(0);\n  });\n\n  test('Should return error when call getUser with exception', async () => {\n    const username = faker.datatype.string();\n\n    const mockRequest = getMockReq({\n      params: {\n        username,\n      },\n    });\n\n    const mockError = new Error('Any Error.');\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.getUser.mockRejectedValue(mockError);\n\n    await controller.getUser(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.getUser).toBeCalledTimes(1);\n    expect(res.status).not.toBeCalled();\n    expect(res.json).not.toBeCalled();\n    expect(next).toBeCalledTimes(1);\n    expect(next).toBeCalledWith(mockError);\n  });\n});\n"],"version":3}