{"file":"/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/controller.spec.ts","mappings":";;;;;AAMA,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAN1B,gDAA4D;AAC5D,2CAAwC;AACxC,8DAAsC;AACtC,8DAAsC;AAKtC,MAAM,cAAc,GAAG,oBAAiD,CAAC;AAEzE,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAC9C,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAClE,MAAM,WAAW,GAAG,IAAA,oBAAU,GAAE,CAAC;QAEjC,MAAM,YAAY,GAAqB;YACrC,IAAI,EAAE,EAAE;YACR,KAAK,EAAE,aAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;YAC9B,WAAW,EAAE,aAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;YACpC,QAAQ,EAAE,aAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;YACjC,QAAQ,EAAE,aAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;YACjC,QAAQ,EAAE,aAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;SAClC,CAAC;QAEF,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,IAAA,oBAAU,GAAE,CAAC;QAEnC,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QAEhE,MAAM,oBAAU,CAAC,MAAM,CAAC,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QAEhD,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC3D,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,cAAc,EAAE,CAAC;QACzD,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QACvC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACpC,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;QACrE,MAAM,WAAW,GAAG,IAAA,oBAAU,GAAE,CAAC;QAEjC,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;QAE1C,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,IAAA,oBAAU,GAAE,CAAC;QAEnC,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QAE7D,MAAM,oBAAU,CAAC,MAAM,CAAC,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QAEhD,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC3D,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;QACpC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;QAClC,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/controller.spec.ts"],"sourcesContent":["import { getMockReq, getMockRes } from '@jest-mock/express';\nimport { faker } from '@faker-js/faker';\nimport Repository from './repository';\nimport controller from './controller';\nimport GetPostsResponse from './interfaces/get-posts-response';\n\njest.mock('./repository');\n\nconst RepositoryMock = Repository as jest.MockedClass<typeof Repository>;\n\ndescribe('Test post controller', () => {\n  beforeEach(async () => {\n    RepositoryMock.prototype.getAll.mockRestore();\n    RepositoryMock.prototype.create.mockRestore();\n  });\n\n  test('Should response 200 when call getAll with sucess', async () => {\n    const mockRequest = getMockReq();\n\n    const getPostsMock: GetPostsResponse = {\n      data: [],\n      count: faker.datatype.number(),\n      currentPage: faker.datatype.number(),\n      nextPage: faker.datatype.number(),\n      prevPage: faker.datatype.number(),\n      lastPage: faker.datatype.number(),\n    };\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.getAll.mockResolvedValue(getPostsMock);\n\n    await controller.getAll(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.getAll).toBeCalledTimes(1);\n    expect(RepositoryMock.prototype.getAll).toBeCalledWith();\n    expect(res.status).toBeCalledTimes(1);\n    expect(res.status).toBeCalledWith(200);\n    expect(res.json).toBeCalledTimes(1);\n    expect(next).toBeCalledTimes(0);\n  });\n\n  test('Should return error when call getAll with exception', async () => {\n    const mockRequest = getMockReq();\n\n    const mockError = new Error('Any Error.');\n\n    const { res, next } = getMockRes();\n\n    RepositoryMock.prototype.getAll.mockRejectedValue(mockError);\n\n    await controller.getAll(mockRequest, res, next);\n\n    expect(RepositoryMock.prototype.getAll).toBeCalledTimes(1);\n    expect(res.status).not.toBeCalled();\n    expect(res.json).not.toBeCalled();\n    expect(next).toBeCalledTimes(1);\n    expect(next).toBeCalledWith(mockError);\n  });\n});\n"],"version":3}