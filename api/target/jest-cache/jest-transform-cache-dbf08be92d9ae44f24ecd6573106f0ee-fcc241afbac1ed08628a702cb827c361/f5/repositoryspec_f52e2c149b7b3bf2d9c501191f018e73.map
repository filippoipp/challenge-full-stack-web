{"file":"/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/repository.spec.ts","mappings":";;;;;AAAA,2CAAwC;AACxC,8DAA6D;AAG7D,8DAA0C;AAE1C,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,UAAU,CAAC,GAAG,EAAE;QACd,6BAAc,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;QAC1C,6BAAc,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;QACnC,6BAAc,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACxE,MAAM,kBAAkB,GAAe;YACrC,MAAM,EAAE,aAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;YAC7B,OAAO,EAAE,aAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;YAChC,IAAI,EAAE,MAAM;SACb,CAAC;QAEF,MAAM,QAAQ,GAAS;YACrB,MAAM,EAAE,aAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;YAC7B,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,aAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;YAChC,cAAc,EAAE,IAAI;YACpB,OAAO,EAAE,IAAI;YACb,EAAE,EAAE,aAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;YACzB,SAAS,EAAE,aAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACpC,SAAS,EAAE,aAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE;SACrC,CAAC;QAEF,6BAAc,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC1C,6BAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAEhD,MAAM,UAAU,GAAG,IAAI,oBAAc,EAAE,CAAC;QACxC,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;QAEhE,MAAM,CAAC,6BAAc,CAAC,KAAK,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAChD,MAAM,CAAC,6BAAc,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;QAC/D,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/domain/post/repository.spec.ts"],"sourcesContent":["import { faker } from '@faker-js/faker';\nimport { repositoryMock } from '../../../mocks/typeorm.mock';\nimport Post from './entities/post';\nimport CreatePost from './interfaces/create-post';\nimport PostRepository from './repository';\n\ndescribe('Test post repository', () => {\n  beforeEach(() => {\n    repositoryMock.findAndCount.mockRestore();\n    repositoryMock.count.mockRestore();\n    repositoryMock.save.mockRestore();\n  });\n\n  test('Should return created post and pagination with success', async () => {\n    const createPostBodyMock: CreatePost = {\n      userId: faker.datatype.uuid(),\n      content: faker.datatype.string(),\n      type: 'POST',\n    };\n\n    const postMock: Post = {\n      userId: faker.datatype.uuid(),\n      type: 'POST',\n      content: faker.datatype.string(),\n      repostedPostId: null,\n      comment: null,\n      id: faker.datatype.uuid(),\n      createdAt: faker.datatype.datetime(),\n      updatedAt: faker.datatype.datetime(),\n    };\n\n    repositoryMock.count.mockResolvedValue(2);\n    repositoryMock.save.mockResolvedValue(postMock);\n\n    const repository = new PostRepository();\n    const createdPost = await repository.create(createPostBodyMock);\n\n    expect(repositoryMock.count).toBeCalledTimes(1);\n    expect(repositoryMock.save).toBeCalledWith(createPostBodyMock);\n    expect(createdPost).toEqual(postMock);\n  });\n});\n"],"version":3}