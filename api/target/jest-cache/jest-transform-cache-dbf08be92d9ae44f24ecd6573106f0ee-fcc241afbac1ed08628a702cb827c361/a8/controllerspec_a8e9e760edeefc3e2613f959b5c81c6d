ba849fd6d3c511ed98d83badad5929e0
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('./repository');
const express_1 = require("@jest-mock/express");
const faker_1 = require("@faker-js/faker");
const repository_1 = __importDefault(require("./repository"));
const controller_1 = __importDefault(require("./controller"));
const RepositoryMock = repository_1.default;
describe('Test post controller', () => {
    beforeEach(async () => {
        RepositoryMock.prototype.getAll.mockRestore();
        RepositoryMock.prototype.create.mockRestore();
    });
    test('Should response 200 when call getAll with sucess', async () => {
        const mockRequest = (0, express_1.getMockReq)();
        const getPostsMock = {
            data: [],
            count: faker_1.faker.datatype.number(),
            currentPage: faker_1.faker.datatype.number(),
            nextPage: faker_1.faker.datatype.number(),
            prevPage: faker_1.faker.datatype.number(),
            lastPage: faker_1.faker.datatype.number(),
        };
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.getAll.mockResolvedValue(getPostsMock);
        await controller_1.default.getAll(mockRequest, res, next);
        expect(RepositoryMock.prototype.getAll).toBeCalledTimes(1);
        expect(RepositoryMock.prototype.getAll).toBeCalledWith({});
        expect(res.status).toBeCalledTimes(1);
        expect(res.status).toBeCalledWith(200);
        expect(res.json).toBeCalledTimes(1);
        expect(next).toBeCalledTimes(0);
    });
    test('Should return error when call getAll with exception', async () => {
        const mockRequest = (0, express_1.getMockReq)();
        const mockError = new Error('Any Error.');
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.getAll.mockRejectedValue(mockError);
        await controller_1.default.getAll(mockRequest, res, next);
        expect(RepositoryMock.prototype.getAll).toBeCalledTimes(1);
        expect(res.status).not.toBeCalled();
        expect(res.json).not.toBeCalled();
        expect(next).toBeCalledTimes(1);
        expect(next).toBeCalledWith(mockError);
    });
    test('Should response 201 when call create with sucess', async () => {
        const createPostBodyMock = {
            userId: faker_1.faker.datatype.uuid(),
            content: faker_1.faker.datatype.string(),
            type: 'POST',
        };
        const post = {
            userId: createPostBodyMock.userId,
            type: 'POST',
            content: createPostBodyMock.content,
            repostedPostId: null,
            comment: null,
            id: faker_1.faker.datatype.uuid(),
            createdAt: faker_1.faker.datatype.datetime(),
            updatedAt: faker_1.faker.datatype.datetime(),
        };
        const mockRequest = (0, express_1.getMockReq)({
            body: createPostBodyMock,
        });
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.create.mockResolvedValue(post);
        await controller_1.default.create(mockRequest, res, next);
        expect(RepositoryMock.prototype.create).toBeCalledTimes(1);
        expect(RepositoryMock.prototype.create).toBeCalledWith(createPostBodyMock);
        expect(res.status).toBeCalledTimes(1);
        expect(res.status).toBeCalledWith(201);
        expect(res.json).toBeCalledTimes(1);
        expect(res.json).toBeCalledWith(createPostBodyMock);
        expect(next).toBeCalledTimes(0);
    });
    test('Should return error when call create with exception', async () => {
        const createPostBodyMock = {
            userId: faker_1.faker.datatype.uuid(),
            content: faker_1.faker.datatype.string(),
            type: 'POST',
        };
        const mockRequest = (0, express_1.getMockReq)({
            body: createPostBodyMock,
        });
        const mockError = new Error('Any Error.');
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.create.mockRejectedValue(mockError);
        await controller_1.default.create(mockRequest, res, next);
        expect(RepositoryMock.prototype.create).toBeCalledTimes(1);
        expect(res.status).not.toBeCalled();
        expect(res.json).not.toBeCalled();
        expect(next).toBeCalledTimes(1);
        expect(next).toBeCalledWith(mockError);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,