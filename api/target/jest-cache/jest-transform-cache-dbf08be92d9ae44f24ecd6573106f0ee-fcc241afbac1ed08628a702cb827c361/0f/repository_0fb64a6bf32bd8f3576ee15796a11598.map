{"version":3,"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","names":["PostRepository","paginateResponse","data","page","limit","result","total","lastPage","Math","ceil","nextPage","prevPage","count","currentPage","getAll","query","postRepository","post_2","take","skip","findAndCount","relations","where","username","user","beginDate","createdAt","endDate","order","id","error","http_error_1","post_1","GET_POSTS_FAILED","create","postData","today","format","userPostsOfDay","userId","POST_CREATION_FAILED","post","save","console","log","exports"],"sources":["/home/filippoippolitorodrigues/√Årea de Trabalho/MYPROJECTS/strider/src/domain/post/repository.ts"],"sourcesContent":["import {\n  Between, getRepository, LessThan, MoreThan,\n} from 'typeorm';\nimport moment from 'moment';\nimport { postErrorKeys, postErrorMessages } from '../../errors/translator/post';\nimport HttpError from '../../errors/http-error';\nimport CreatePost from './interfaces/create-post';\nimport Post from './entities/post';\nimport GetPostsResponse from './interfaces/get-posts-response';\n\nexport default class PostRepository {\n  private async paginateResponse(data, page: number, limit: number): Promise<GetPostsResponse> {\n    const [result, total] = data;\n    const lastPage = Math.ceil(total / limit);\n    const nextPage = page + 1 > lastPage ? null : page + 1;\n    const prevPage = page - 1 < 1 ? null : page - 1;\n\n    return {\n      data: [...result],\n      count: total,\n      currentPage: page,\n      nextPage,\n      prevPage,\n      lastPage,\n    };\n  }\n\n  public async getAll(query: any): Promise<GetPostsResponse> {\n    try {\n      const postRepository = getRepository(Post);\n\n      const take = query.take || 10;\n      const page = query.page || 1;\n      const skip = (page - 1) * take;\n\n      const data = await postRepository.findAndCount(\n        {\n          relations: ['user'],\n          where: {\n            ...(query.username && { user: { username: query.username } }),\n            ...(query.beginDate && { createdAt: MoreThan(query.beginDate) }),\n            ...(query.endDate && { createdAt: LessThan(query.endDate) }),\n          },\n          order: { id: 'DESC' },\n          take,\n          skip,\n        },\n      );\n\n      return await this.paginateResponse(data, page, take);\n    } catch (error) {\n      throw new HttpError(\n        500,\n        postErrorKeys.GET_POSTS_FAILED,\n        postErrorMessages[postErrorKeys.GET_POSTS_FAILED],\n        {},\n      );\n    }\n  }\n\n  public async create(postData: CreatePost): Promise<Post> {\n    try {\n      const today = moment().format('YYYY-MM-DD');\n      const postRepository = getRepository(Post);\n      const userPostsOfDay = await postRepository.count({\n        where: {\n          userId: postData.userId,\n          createdAt: Between(`${today} 00:00:00`, `${today} 23:59:59`),\n        },\n      });\n\n      if (userPostsOfDay >= 5) {\n        throw new HttpError(\n          400,\n          postErrorKeys.POST_CREATION_FAILED,\n          postErrorMessages[postErrorKeys.POST_CREATION_FAILED],\n          {},\n        );\n      }\n\n      const post = await postRepository.save(postData);\n      return post;\n    } catch (error) {\n      console.log(error)\n      throw new HttpError(\n        500,\n        postErrorKeys.POST_CREATION_FAILED,\n        postErrorMessages[postErrorKeys.POST_CREATION_FAILED],\n        {},\n      );\n    }\n  }\n}\n"]}