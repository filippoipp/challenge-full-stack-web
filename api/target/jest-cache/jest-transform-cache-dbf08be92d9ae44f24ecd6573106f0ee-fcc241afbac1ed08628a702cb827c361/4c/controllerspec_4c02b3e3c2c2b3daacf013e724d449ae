c0038efcf0de6c50a89ae9d11210bc5e
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('./repository');
const express_1 = require("@jest-mock/express");
const faker_1 = require("@faker-js/faker");
const repository_1 = __importDefault(require("./repository"));
const controller_1 = __importDefault(require("./controller"));
const RepositoryMock = repository_1.default;
describe('Test post controller', () => {
    beforeEach(async () => {
        RepositoryMock.prototype.getUser.mockRestore();
    });
    test('Should response 200 when call getUser with sucess', async () => {
        const username = faker_1.faker.datatype.string();
        const mockRequest = (0, express_1.getMockReq)({
            params: {
                username,
            },
        });
        const userMock = {
            username,
            createdAt: faker_1.faker.datatype.string(),
            postsCount: faker_1.faker.datatype.number(),
        };
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.getUser.mockResolvedValue(userMock);
        await controller_1.default.getUser(mockRequest, res, next);
        expect(RepositoryMock.prototype.getUser).toBeCalledTimes(1);
        expect(RepositoryMock.prototype.getUser).toBeCalledWith(username);
        expect(res.status).toBeCalledTimes(1);
        expect(res.status).toBeCalledWith(200);
        expect(res.json).toBeCalledTimes(1);
        expect(next).toBeCalledTimes(0);
    });
    test('Should return error when call getUser with exception', async () => {
        const username = faker_1.faker.datatype.string();
        const mockRequest = (0, express_1.getMockReq)({
            params: {
                username,
            },
        });
        const mockError = new Error('Any Error.');
        const { res, next } = (0, express_1.getMockRes)();
        RepositoryMock.prototype.getUser.mockRejectedValue(mockError);
        await controller_1.default.getUser(mockRequest, res, next);
        expect(RepositoryMock.prototype.getUser).toBeCalledTimes(1);
        expect(res.status).not.toBeCalled();
        expect(res.json).not.toBeCalled();
        expect(next).toBeCalledTimes(1);
        expect(next).toBeCalledWith(mockError);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvZmlsaXBwb2lwcG9saXRvcm9kcmlndWVzL8OBcmVhIGRlIFRyYWJhbGhvL01ZUFJPSkVDVFMvc3RyaWRlci9zcmMvZG9tYWluL3VzZXIvY29udHJvbGxlci5zcGVjLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBTUEsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztBQU4xQixnREFBNEQ7QUFDNUQsMkNBQXdDO0FBQ3hDLDhEQUFzQztBQUN0Qyw4REFBc0M7QUFLdEMsTUFBTSxjQUFjLEdBQUcsb0JBQWlELENBQUM7QUFFekUsUUFBUSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtJQUNwQyxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsY0FBYyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDakQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsbURBQW1ELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbkUsTUFBTSxRQUFRLEdBQUcsYUFBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUV6QyxNQUFNLFdBQVcsR0FBRyxJQUFBLG9CQUFVLEVBQUM7WUFDN0IsTUFBTSxFQUFFO2dCQUNOLFFBQVE7YUFDVDtTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFvQjtZQUNoQyxRQUFRO1lBQ1IsU0FBUyxFQUFFLGFBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ2xDLFVBQVUsRUFBRSxhQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtTQUNwQyxDQUFDO1FBRUYsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFBLG9CQUFVLEdBQUUsQ0FBQztRQUVuQyxjQUFjLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU3RCxNQUFNLG9CQUFVLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFakQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVELE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsRSxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLHNEQUFzRCxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3RFLE1BQU0sUUFBUSxHQUFHLGFBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFekMsTUFBTSxXQUFXLEdBQUcsSUFBQSxvQkFBVSxFQUFDO1lBQzdCLE1BQU0sRUFBRTtnQkFDTixRQUFRO2FBQ1Q7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLFNBQVMsR0FBRyxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUUxQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLElBQUEsb0JBQVUsR0FBRSxDQUFDO1FBRW5DLGNBQWMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTlELE1BQU0sb0JBQVUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVqRCxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvZmlsaXBwb2lwcG9saXRvcm9kcmlndWVzL8OBcmVhIGRlIFRyYWJhbGhvL01ZUFJPSkVDVFMvc3RyaWRlci9zcmMvZG9tYWluL3VzZXIvY29udHJvbGxlci5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldE1vY2tSZXEsIGdldE1vY2tSZXMgfSBmcm9tICdAamVzdC1tb2NrL2V4cHJlc3MnO1xuaW1wb3J0IHsgZmFrZXIgfSBmcm9tICdAZmFrZXItanMvZmFrZXInO1xuaW1wb3J0IFJlcG9zaXRvcnkgZnJvbSAnLi9yZXBvc2l0b3J5JztcbmltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcic7XG5pbXBvcnQgR2V0VXNlclJlc3BvbnNlIGZyb20gJy4vaW50ZXJmYWNlcy9nZXQtdXNlci1yZXNwb25zZSc7XG5cbmplc3QubW9jaygnLi9yZXBvc2l0b3J5Jyk7XG5cbmNvbnN0IFJlcG9zaXRvcnlNb2NrID0gUmVwb3NpdG9yeSBhcyBqZXN0Lk1vY2tlZENsYXNzPHR5cGVvZiBSZXBvc2l0b3J5PjtcblxuZGVzY3JpYmUoJ1Rlc3QgcG9zdCBjb250cm9sbGVyJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBSZXBvc2l0b3J5TW9jay5wcm90b3R5cGUuZ2V0VXNlci5tb2NrUmVzdG9yZSgpO1xuICB9KTtcblxuICB0ZXN0KCdTaG91bGQgcmVzcG9uc2UgMjAwIHdoZW4gY2FsbCBnZXRVc2VyIHdpdGggc3VjZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHVzZXJuYW1lID0gZmFrZXIuZGF0YXR5cGUuc3RyaW5nKCk7XG5cbiAgICBjb25zdCBtb2NrUmVxdWVzdCA9IGdldE1vY2tSZXEoe1xuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIHVzZXJuYW1lLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHVzZXJNb2NrOiBHZXRVc2VyUmVzcG9uc2UgPSB7XG4gICAgICB1c2VybmFtZSxcbiAgICAgIGNyZWF0ZWRBdDogZmFrZXIuZGF0YXR5cGUuc3RyaW5nKCksXG4gICAgICBwb3N0c0NvdW50OiBmYWtlci5kYXRhdHlwZS5udW1iZXIoKSxcbiAgICB9O1xuXG4gICAgY29uc3QgeyByZXMsIG5leHQgfSA9IGdldE1vY2tSZXMoKTtcblxuICAgIFJlcG9zaXRvcnlNb2NrLnByb3RvdHlwZS5nZXRVc2VyLm1vY2tSZXNvbHZlZFZhbHVlKHVzZXJNb2NrKTtcblxuICAgIGF3YWl0IGNvbnRyb2xsZXIuZ2V0VXNlcihtb2NrUmVxdWVzdCwgcmVzLCBuZXh0KTtcblxuICAgIGV4cGVjdChSZXBvc2l0b3J5TW9jay5wcm90b3R5cGUuZ2V0VXNlcikudG9CZUNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChSZXBvc2l0b3J5TW9jay5wcm90b3R5cGUuZ2V0VXNlcikudG9CZUNhbGxlZFdpdGgodXNlcm5hbWUpO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmVDYWxsZWRXaXRoKDIwMCk7XG4gICAgZXhwZWN0KHJlcy5qc29uKS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KG5leHQpLnRvQmVDYWxsZWRUaW1lcygwKTtcbiAgfSk7XG5cbiAgdGVzdCgnU2hvdWxkIHJldHVybiBlcnJvciB3aGVuIGNhbGwgZ2V0VXNlciB3aXRoIGV4Y2VwdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB1c2VybmFtZSA9IGZha2VyLmRhdGF0eXBlLnN0cmluZygpO1xuXG4gICAgY29uc3QgbW9ja1JlcXVlc3QgPSBnZXRNb2NrUmVxKHtcbiAgICAgIHBhcmFtczoge1xuICAgICAgICB1c2VybmFtZSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBjb25zdCBtb2NrRXJyb3IgPSBuZXcgRXJyb3IoJ0FueSBFcnJvci4nKTtcblxuICAgIGNvbnN0IHsgcmVzLCBuZXh0IH0gPSBnZXRNb2NrUmVzKCk7XG5cbiAgICBSZXBvc2l0b3J5TW9jay5wcm90b3R5cGUuZ2V0VXNlci5tb2NrUmVqZWN0ZWRWYWx1ZShtb2NrRXJyb3IpO1xuXG4gICAgYXdhaXQgY29udHJvbGxlci5nZXRVc2VyKG1vY2tSZXF1ZXN0LCByZXMsIG5leHQpO1xuXG4gICAgZXhwZWN0KFJlcG9zaXRvcnlNb2NrLnByb3RvdHlwZS5nZXRVc2VyKS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KHJlcy5zdGF0dXMpLm5vdC50b0JlQ2FsbGVkKCk7XG4gICAgZXhwZWN0KHJlcy5qc29uKS5ub3QudG9CZUNhbGxlZCgpO1xuICAgIGV4cGVjdChuZXh0KS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KG5leHQpLnRvQmVDYWxsZWRXaXRoKG1vY2tFcnJvcik7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=