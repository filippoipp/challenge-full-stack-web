{"file":"/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/middlewares/validation.test.ts","mappings":"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","names":[],"sources":["/home/filippoippolitorodrigues/Área de Trabalho/MYPROJECTS/strider/src/middlewares/validation.test.ts"],"sourcesContent":["import crypto from 'crypto';\r\n\r\nimport Joi from '@hapi/joi';\r\nimport { getMockReq, getMockRes } from '@jest-mock/express';\r\n\r\nimport HttpError from '../errors/http-error';\r\nimport {\r\n  validateBody, validateParams, validateQuery, validateRequest,\r\n} from './validation';\r\n\r\nconst keycloakRequest = Joi.object({\r\n  keycloakTokenModel: Joi.object({\r\n    idAccount: Joi.string().required(),\r\n  }).required(),\r\n});\r\n\r\nconst anyParams = Joi.object({\r\n  idAccount: Joi.string().required(),\r\n});\r\n\r\nconst anyBody = Joi.object({\r\n  idAccount: Joi.string().required(),\r\n});\r\n\r\nconst fakeValue = () => crypto.randomBytes(32).toString('hex');\r\n\r\ndescribe('Test validation middleware', () => {\r\n  test('Should call next with error when called validateRequest with object empty', async () => {\r\n    const mockRequest = getMockReq({\r\n      keycloakTokenModel: {},\r\n    });\r\n\r\n    const httpError = new HttpError(422, 'SERVER-422', 'Validation error', [\r\n      { idAccount: 'keycloakTokenModel.idAccount is required' },\r\n    ]);\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateRequest(keycloakRequest);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith(httpError);\r\n  });\r\n\r\n  test('Should call next with error when called validateRequest with object undefined', async () => {\r\n    const mockRequest = getMockReq({\r\n      keycloakTokenModel: undefined,\r\n    });\r\n\r\n    const httpError = new HttpError(422, 'SERVER-422', 'Validation error', [\r\n      { idAccount: 'keycloakTokenModel is required' },\r\n    ]);\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateRequest(keycloakRequest);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith(httpError);\r\n  });\r\n\r\n  test('Should call next with empty when called validateRequest with object valid', async () => {\r\n    const mockRequest = getMockReq({\r\n      keycloakTokenModel: {\r\n        idAccount: fakeValue(),\r\n      },\r\n    });\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateRequest(keycloakRequest);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith();\r\n  });\r\n\r\n  test('Should call next with error when called validateParams with object empty', async () => {\r\n    const mockRequest = getMockReq({\r\n      params: {},\r\n    });\r\n\r\n    const httpError = new HttpError(422, 'SERVER-422', 'Validation error', [\r\n      { idAccount: 'idAccount is required' },\r\n    ]);\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateParams(anyParams);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith(httpError);\r\n  });\r\n\r\n  test('Should call next with empty when called validateParams with object valid', async () => {\r\n    const mockRequest = getMockReq({\r\n      params: {\r\n        idAccount: fakeValue(),\r\n      },\r\n    });\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateParams(anyParams);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith();\r\n  });\r\n\r\n  test('Should call next with error when called validateQuery with object empty', async () => {\r\n    const mockRequest = getMockReq({\r\n      query: {},\r\n    });\r\n\r\n    const httpError = new HttpError(422, 'SERVER-422', 'Validation error', [\r\n      { idAccount: 'idAccount is required' },\r\n    ]);\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateQuery(anyParams);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith(httpError);\r\n  });\r\n\r\n  test('Should call next with empty when called validateQuery with object valid', async () => {\r\n    const mockRequest = getMockReq({\r\n      query: {\r\n        idAccount: fakeValue(),\r\n      },\r\n    });\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateQuery(anyParams);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith();\r\n  });\r\n\r\n  test('Should call next with error when called validateBody with object empty', async () => {\r\n    const mockRequest = getMockReq({\r\n      body: {},\r\n    });\r\n\r\n    const httpError = new HttpError(422, 'SERVER-422', 'Validation error', [\r\n      { idAccount: 'idAccount is required' },\r\n    ]);\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateBody(anyBody);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith(httpError);\r\n  });\r\n\r\n  test('Should call next with empty when called validateBody with object valid', async () => {\r\n    const mockRequest = getMockReq({\r\n      body: {\r\n        idAccount: fakeValue(),\r\n      },\r\n    });\r\n\r\n    const { res, next } = getMockRes();\r\n\r\n    const middleware = validateBody(anyBody);\r\n    await middleware(mockRequest, res, next);\r\n\r\n    expect(next).toHaveBeenCalledTimes(1);\r\n    expect(next).toHaveBeenCalledWith();\r\n  });\r\n});\r\n"],"version":3}